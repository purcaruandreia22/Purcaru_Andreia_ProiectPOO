//Nume: Purcaru Andreia Daniela
//Domeniul ales: PAnDemie
//Clasele alese: Spital, Vaccin, Pacient

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include<fstream>
using namespace std;

class Spital
{
private:
    const int anConstructie;

    string denumireSpital;
    char* orasSpital;
    float suprafataMp;
    int nrMedici;
    string* numeMedici;
    bool existaPacientiLaAti;

    static bool autorizatieFunctionare;
public:


    // Constructor cu toți parametrii
    Spital(int anConstructie, string denumireSpital, const char* orasSpital, float suprafataMp, int nrMedici, string* numeMedici, bool existaPacientiLaAti) :anConstructie(anConstructie)
    {
        this->denumireSpital = denumireSpital;
        this->orasSpital = new char[strlen(orasSpital) + 1];
        strcpy(this->orasSpital, orasSpital);
        this->suprafataMp = suprafataMp;
        this->nrMedici = nrMedici;
        this->numeMedici = new string[this->nrMedici];
        for (int i = 0; i < this->nrMedici; i++)
            this->numeMedici[i] = numeMedici[i];
        this->existaPacientiLaAti = existaPacientiLaAti;
    }


    // Constructor fără parametrii
    Spital() : anConstructie(0)
    {
        this->denumireSpital = "Necunoscuta";
        this->orasSpital = new char[strlen("Necunoscut") + 1];
        strcpy(this->orasSpital, "Necunoscut");
        this->suprafataMp = 0;
        this->nrMedici = 0;
        this->numeMedici = NULL;
        this->existaPacientiLaAti = 0;
    }


    // Constructor cu 2 parametri
    Spital(string denumireSpital, float suprafataMp) : anConstructie(0)
    {
        this->denumireSpital = denumireSpital;
        this->orasSpital = new char[strlen("Necunoscut") + 1];
        strcpy(this->orasSpital, "Necunoscut");
        this->suprafataMp = suprafataMp;
        this->nrMedici = 0;
        this->numeMedici = NULL;
        this->existaPacientiLaAti = 0;
    }


    //destructor
    ~Spital()
    {
        if (this->orasSpital != NULL)
        {
            delete[] this->orasSpital;
        }
        if (this->numeMedici != NULL)
        {
            delete[] this->numeMedici;
        }

    }


    //constructor copiere
    Spital(const Spital& obj) :anConstructie(obj.anConstructie)
    {
        this->denumireSpital = obj.denumireSpital;
        this->orasSpital = new char[strlen(obj.orasSpital) + 1];
        strcpy(this->orasSpital, obj.orasSpital);
        this->suprafataMp = obj.suprafataMp;
        this->nrMedici = obj.nrMedici;
        this->numeMedici = new string[this->nrMedici];
        for (int i = 0; i < this->nrMedici; i++)

            this->numeMedici[i] = obj.numeMedici[i];
        this->existaPacientiLaAti = obj.existaPacientiLaAti;

    }


    //operatorul =
    Spital& operator=(const Spital& obj)
    {
        if (this->orasSpital != NULL)
        {
            delete[] this->orasSpital;
        }
        if (this->numeMedici != NULL)
        {
            delete[] this->numeMedici;
        }
        this->denumireSpital = obj.denumireSpital;
        this->orasSpital = new char[strlen(obj.orasSpital) + 1];
        strcpy(this->orasSpital, obj.orasSpital);
        this->suprafataMp = obj.suprafataMp;
        this->nrMedici = obj.nrMedici;
        this->numeMedici = new string[this->nrMedici];
        for (int i = 0; i < this->nrMedici; i++)

            this->numeMedici[i] = obj.numeMedici[i];
        this->existaPacientiLaAti = obj.existaPacientiLaAti;

        return *this;
    }

    //operatorul <=
    //CERINTA: COMPARAREA A DOUA SPITALE DUPA SUPRAFATA LOR
    bool operator<=(const Spital obj)
    {
        if (this->suprafataMp <= obj.suprafataMp)
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }

    //operatorul logic !
    //CERINTA: SA SE SCHIMBE VALOAREA ATRIBUTULUI BOOL A SPITALULUI S3
    friend void operator!(Spital& obj)
    {
        if (obj.existaPacientiLaAti == 1)
        {
            obj.existaPacientiLaAti = 0;
        }
        else
        {
            obj.existaPacientiLaAti = 1;
        }
    }

    //operatorul de indexare []
    //CERINTA: SA SE AFISEZE NUMELE MEDICULUI DE PE POZITIA 2
    string operator[](int pozitie)
    {
        if (pozitie >= 0 && pozitie < this->nrMedici)
        {
            return this->numeMedici[pozitie];
        }
        else
        {
            return "Pozitia nu exista!";
        }
    }

    //operatorul >>
    friend istream& operator>>(istream& it, Spital& o)
    {
        delete[] o.orasSpital;
        delete[] o.numeMedici;

        cout << "Introduceti denumirea spitalului: ";
        it >> o.denumireSpital;
        cout << "Introduceti suprafata magazinului: ";
        it >> o.suprafataMp;
        cout << "Introduceti 1 daca spitalul are pacienti la ATI, 0 daca nu are pacienti la ATI: ";
        it >> o.existaPacientiLaAti;

        cout << "Introduceti orasul din care provine spitalul: ";
        char aux[100];
        it >> aux;
        o.orasSpital = new char[strlen(aux) + 1];
        strcpy(o.orasSpital, aux);

        cout << "Introduceti numarul medicilor: ";
        it >> o.nrMedici;

        o.numeMedici = new string[o.nrMedici];
        cout << "Introduceti numele medicilor: ";
        for (int j = 0;j < o.nrMedici;j++)
        {
            cout << "Nume: ";
            it >> o.numeMedici[j];
        }
        return it;
    }


    //operatorul <<
    friend ostream& operator<<(ostream& os, const Spital& ob)
    {
        os << "Denumire spital: " << ob.denumireSpital << endl;
        os << "Are pacienti la ATI? (1-DA!/0-NU!): " << ob.existaPacientiLaAti << endl;
        os << "Suprafata m^2: " << ob.suprafataMp << endl;
        os << "Orasul din care provine spitalul: " << ob.orasSpital << endl;
        os << "Numar medici: " << ob.nrMedici << endl;
        cout << "Nume medici: " << endl;
        for (int i = 0;i < ob.nrMedici;i++)
        {
            os << ob.numeMedici[i] << endl;
        }
        os << "Anul constructiei: " << ob.anConstructie << endl;
        return os;
    }

    //scrierea in fisier text
    friend ofstream& operator<<(ofstream& file, Spital& obj)
    {
        file << obj.denumireSpital << endl;
        file << obj.existaPacientiLaAti << endl;
        file << obj.suprafataMp << endl;
        file << obj.orasSpital << endl;
        file << obj.nrMedici << endl;
        for (int i = 0;i < obj.nrMedici;i++)
        {
            file << obj.numeMedici[i] << endl;
        }
        return file;
    }

    //citire din fisier text
    friend ifstream& operator >>(ifstream& file, Spital& obj)
    {
        delete[] obj.orasSpital;
        delete[] obj.numeMedici;

        file >> obj.denumireSpital;
        file >> obj.existaPacientiLaAti;
        file >> obj.suprafataMp;

        char aux[100];
        file >> aux;
        obj.orasSpital = new char[strlen(aux) + 1];
        strcpy(obj.orasSpital, aux);

        file >> obj.nrMedici;

        obj.numeMedici = new string[obj.nrMedici];

        for (int j = 0; j < obj.nrMedici; j++)
        {
            file >> obj.numeMedici[j];
        }
        return file;
    }

    //getteri

    int getAnConstructie()
    {
        return this->anConstructie;
    }

    string getDenumireSpital()
    {
        return this->denumireSpital;
    }

    char* getOrasSpital()
    {
        return this->orasSpital;
    }

    float getSuprafataMp()
    {
        return this->suprafataMp;
    }

    int getNrMedici()
    {
        return this->nrMedici;
    }

    string* getNumeMedici()
    {
        return this->numeMedici;
    }

    bool getExistaPacientiLaAti()
    {
        return this->existaPacientiLaAti;
    }


    //setteri
    void setDenumireSpital(string denumireNouaSpital)
    {
        this->denumireSpital = denumireNouaSpital;
    }

    void setOrasSpital(const char* orasNouSpital)
    {
        if (this->orasSpital != NULL)
        {
            delete[] this->orasSpital;
        }

        this->orasSpital = new char[strlen(orasNouSpital) + 1];
        strcpy(this->orasSpital, orasNouSpital);
    }

    void setSuprafataMp(float suprafataNouaMp)
    {
        this->suprafataMp = suprafataNouaMp;
    }

    void setMedici(int nrNouMedici, string* numeMediciNoi)
    {
        if (this->numeMedici != NULL)
        {
            delete[] this->numeMedici;
        }

        this->nrMedici = nrNouMedici;
        this->numeMedici = new string[this->nrMedici];
        for (int i = 0; i < this->nrMedici; i++)
            this->numeMedici[i] = numeMediciNoi[i];
    }

    void setExistaPacientiLaAti(bool existaPacientiLaAtiNou)
    {
        this->existaPacientiLaAti = existaPacientiLaAtiNou;
    }


    //metoda afisare
    void afisare()
    {
        cout << "An constructie spital:" << this->anConstructie << endl;
        cout << "Orasul in care se afla spitalul:" << this->orasSpital << endl;
        cout << "Suprafata in mp a spitalului:" << this->suprafataMp << endl;
        cout << "Numarul de medici din spital:" << this->nrMedici << endl;
        cout << "Numele medicilor din spital:";
        for (int i = 0; i < this->nrMedici; i++)
        {
            cout << this->numeMedici[i] << " ; ";
        }
        cout << endl;
        cout << "Exista pacienti la ATI?:";
        if (this->existaPacientiLaAti == 1)
        {
            cout << "DA!" << endl;
        }
        else
        {
            cout << "NU!" << endl;
        }
    }

    //functie statica pentru a afisa daca un spital are autorizatie de functiionare sau nu
    static void AfisareAutorizatieFunctionare(Spital autorizatie)
    {
        if (autorizatie.autorizatieFunctionare)
        {
            cout << "Spitalul " << autorizatie.denumireSpital << " are autorizatie de functionare." << endl;
        }
        else
        {
            cout << "Spitalul " << autorizatie.denumireSpital << " nu are autorizatie de functionare." << endl;
        }
    }

    //functie statica pentru afisarea atributului static
    static bool getAutorizatieFunctionare()
    {
        return autorizatieFunctionare;
    }

    //functie statica pentru modificarea atributului static
    static void setAutorizatieFunctionare(bool autorizatieFunctionareNoua)
    {
        autorizatieFunctionare = autorizatieFunctionareNoua;
    }

    friend void AfisareDetaliiSpital(const Spital& spital);

};

bool Spital::autorizatieFunctionare = 1;



class VaccinCovid
{
private:
    const int temperaturaPastrareCelsius;

    string numeVaccin;
    float eficacitate;
    int nrDoze;
    bool necesitaRefrigerare;
    int nrCentreVaccinare;
    int* stocVaccinInCentreleDeVaccinare;

    static string numeAfectiune;
public:


    // Constructor cu toti parametrii
    VaccinCovid(int temperaturaPastrareCelsius, string numeVaccin, float eficacitate, int nrDoze, bool necesitaRefrigerare, int nrCentreVaccinare, int* stocVaccinInCentreleDeVaccinare) :temperaturaPastrareCelsius(temperaturaPastrareCelsius)
    {
        this->numeVaccin = numeVaccin;
        this->eficacitate = eficacitate;
        this->nrDoze = nrDoze;
        this->necesitaRefrigerare = necesitaRefrigerare;
        this->nrCentreVaccinare = nrCentreVaccinare;
        this->stocVaccinInCentreleDeVaccinare = new int[this->nrCentreVaccinare];
        for (int i = 0; i < this->nrCentreVaccinare; i++)
        {
            this->stocVaccinInCentreleDeVaccinare[i] = stocVaccinInCentreleDeVaccinare[i];
        }
    }


    // Constructor cu 3 parametrii
    VaccinCovid(float eficacitate, int nrDoze, bool necesitaRefrigerare) :temperaturaPastrareCelsius(0)
    {
        this->numeVaccin = "Necunoscut";
        this->eficacitate = eficacitate;
        this->nrDoze = nrDoze;
        this->necesitaRefrigerare = necesitaRefrigerare;
        this->nrCentreVaccinare = 0;
        this->stocVaccinInCentreleDeVaccinare = NULL;
    }


    // Constructor fara parametri
    VaccinCovid() :temperaturaPastrareCelsius(0)
    {
        this->numeVaccin = "Necunoscut";
        this->eficacitate = 0;
        this->nrDoze = 0;
        this->necesitaRefrigerare = 0;
        this->nrCentreVaccinare = 0;
        this->stocVaccinInCentreleDeVaccinare = NULL;
    }


    //destructor
    ~VaccinCovid()
    {
        if (this->stocVaccinInCentreleDeVaccinare != NULL)
        {
            delete[] this->stocVaccinInCentreleDeVaccinare;
        }
    }


    //constructor copiere
    VaccinCovid(const VaccinCovid& obj) :temperaturaPastrareCelsius(obj.temperaturaPastrareCelsius)
    {
        this->numeVaccin = obj.numeVaccin;
        this->eficacitate = obj.eficacitate;
        this->nrDoze = obj.nrDoze;
        this->necesitaRefrigerare = obj.necesitaRefrigerare;
        this->nrCentreVaccinare = obj.nrCentreVaccinare;
        this->stocVaccinInCentreleDeVaccinare = new int[this->nrCentreVaccinare];
        for (int i = 0; i < this->nrCentreVaccinare; i++)
        {
            this->stocVaccinInCentreleDeVaccinare[i] = obj.stocVaccinInCentreleDeVaccinare[i];
        }
    }

    //operatoorul =
    VaccinCovid& operator=(const VaccinCovid obj)
    {
        this->numeVaccin = obj.numeVaccin;
        this->eficacitate = obj.eficacitate;
        this->nrDoze = obj.nrDoze;
        this->necesitaRefrigerare = obj.necesitaRefrigerare;
        this->nrCentreVaccinare = obj.nrCentreVaccinare;
        this->stocVaccinInCentreleDeVaccinare = new int[this->nrCentreVaccinare];
        for (int i = 0; i < this->nrCentreVaccinare; i++)
        {
            this->stocVaccinInCentreleDeVaccinare[i] = obj.stocVaccinInCentreleDeVaccinare[i];
        }
        return *this;
    }

    //operatorul de autoincrementare ++ 
    //CERINTA: SA SE ADAUGE INCA UN CENTRU DE VACCINARE
    //(preincrementare)
    VaccinCovid& operator ++()
    {
        this->nrDoze++;
        return *this;
    }
    //(postincrementare)
    VaccinCovid operator++(int)
    {
        VaccinCovid copie1 = *this;
        this->nrDoze++;
        return copie1;
    }


    //operatorul functie ()
    // CERINTA: CALCULATI NUMARUL TOTAL DE STOCURI CARE DEPASESC PREGUL DE 70
    int operator ()(float prag)
    {
        int contor = 0;
        for (int i = 0;i < this->nrCentreVaccinare;i++)
        {
            if (this->stocVaccinInCentreleDeVaccinare[i] > prag)
            {
                contor++;
            }
        }
        return contor;
    }

    //operatorul <=
    //CERINTA: COMPARATI EFICACITATILE DINTRE VACCINUL V1 SI V2
    bool operator<=(const VaccinCovid& obj)
    {
        if (this->eficacitate <= obj.eficacitate)
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }

    //operatorul >>
    friend istream& operator>>(istream& ist, VaccinCovid& v)
    {
        delete[] v.stocVaccinInCentreleDeVaccinare;
        cout << "Introduceti numele vaccinului: " << endl;
        ist >> v.numeVaccin;
        cout << "Introduceti eficacitatea vaccinului: " << endl;
        ist >> v.eficacitate;
        cout << "Introduceti numarul dozelor necesare: " << endl;
        ist >> v.nrDoze;
        cout << "Introduceti 1 daca vaccinul necesita refrigerare si 0 daca nu necesita refrigerare: " << endl;
        ist >> v.necesitaRefrigerare;
        cout << "Introduceti numarul centrelor de vaccinare: " << endl;
        ist >> v.nrCentreVaccinare;

        v.stocVaccinInCentreleDeVaccinare = new int[v.nrCentreVaccinare];
        cout << "Introduceti stocul vaccinului: ";
        for (int j = 0;j < v.nrCentreVaccinare;j++)
        {
            cout << "Stoc: ";
            ist >> v.stocVaccinInCentreleDeVaccinare[j];
        }
        return ist;
    }

    //operatorul <<
    friend ostream& operator<<(ostream& ost, const VaccinCovid& va)
    {
        ost << "Nume vaccin: " << va.numeVaccin << endl;
        ost << "Eficacitate: " << va.eficacitate << endl;
        ost << "Doze necesare: " << va.nrDoze << endl;
        ost << "Necesita refrigerare? (1-DA!/0-NU!): " << endl;
        ost << "Numarul centrelor de vaccinare: " << va.nrCentreVaccinare << endl;
        cout << "Stoc: " << endl;
        for (int i = 0;i < va.nrCentreVaccinare;i++)
        {
            ost << va.stocVaccinInCentreleDeVaccinare[i] << endl;
        }
        ost << "Temperatura de pastrare grade celsius: " << va.temperaturaPastrareCelsius;
        return ost;
    }
    /*string numeVaccin;
    float eficacitate;
    int nrDoze;
    bool necesitaRefrigerare;
    int nrCentreVaccinare;
    int* stocVaccinInCentreleDeVaccinare;*/

    //scrierea in fisier text
    friend ofstream& operator<<(ofstream& fil, VaccinCovid& obj)
    {
        fil << obj.numeVaccin << endl;
        fil << obj.eficacitate << endl;
        fil << obj.nrDoze << endl;
        fil << obj.necesitaRefrigerare << endl;
        fil << obj.nrCentreVaccinare << endl;
        for (int i = 0;i < obj.nrCentreVaccinare;i++)
        {
            fil << obj.stocVaccinInCentreleDeVaccinare[i] << endl;
        }
        return fil;
    }

    //citire din fisier text
    friend ifstream& operator >>(ifstream& fil, VaccinCovid& obj)
    {
        delete[] obj.stocVaccinInCentreleDeVaccinare;

        fil >> obj.numeVaccin;
        fil >> obj.eficacitate;
        fil >> obj.nrDoze;
        fil >> obj.necesitaRefrigerare;
        fil >> obj.nrCentreVaccinare;

        obj.stocVaccinInCentreleDeVaccinare = new int[obj.nrCentreVaccinare];

        for (int j = 0; j < obj.nrCentreVaccinare; j++)
        {
            fil >> obj.stocVaccinInCentreleDeVaccinare[j];
        }
        return fil;
    }

    //getteri
    int getTemperaturaPastrareCelsius()
    {
        return this->temperaturaPastrareCelsius;
    }

    string getNumeVaccin()
    {
        return this->numeVaccin;
    }

    float getEficacitate()
    {
        return this->eficacitate;
    }

    int getNrDoze()
    {
        return this->nrDoze;
    }

    bool getNecesitaRefrigerare()
    {
        return this->necesitaRefrigerare;
    }

    int getNrCentreVaccinare()
    {
        return this->nrCentreVaccinare;
    }

    int* getStocVaccinInCentreleDeVaccinare()
    {
        return this->stocVaccinInCentreleDeVaccinare;
    }


    //setteri
    void setNumeVaccin(string numeNouVaccin)
    {
        this->numeVaccin = numeNouVaccin;
    }

    void setEficacitate(float eficacitateNoua)
    {
        this->eficacitate = eficacitateNoua;
    }

    void setNrDoze(int nrDozeNoi)
    {
        this->nrDoze = nrDozeNoi;
    }

    void setNecesitaRefrigerare(bool necesitaRefrigerareNou)
    {
        this->necesitaRefrigerare = necesitaRefrigerareNou;
    }

    void setStocVaccine(int nrNouCentreVaccinare, int* stocNouVaccinInCentreleDeVaccinare)
    {
        if (this->stocVaccinInCentreleDeVaccinare != NULL)
        {
            delete[] this->stocVaccinInCentreleDeVaccinare;
        }

        this->nrCentreVaccinare = nrNouCentreVaccinare;
        this->stocVaccinInCentreleDeVaccinare = new int[this->nrCentreVaccinare];
        for (int i = 0; i < this->nrCentreVaccinare; i++)
        {
            this->stocVaccinInCentreleDeVaccinare[i] = stocNouVaccinInCentreleDeVaccinare[i];
        }
    }


    //metoda afisare
    void afisare()
    {
        cout << "Temperatura de pastrare in grade Celsius a vaccinului este:" << this->temperaturaPastrareCelsius << endl;
        cout << "Numele vaccinului este:" << this->numeVaccin << endl;
        cout << "Eficacitatea vaccinului este:" << this->eficacitate << endl;
        cout << "Nr de doze necesar este:" << this->nrDoze << endl;
        cout << "Necesita refrigerare?:";
        if (this->necesitaRefrigerare == 1)
        {
            cout << "DA!" << endl;
        }
        else
        {
            cout << "NU!" << endl;
        }
        cout << "Nr de centre de vaccinare in care se regaseste vaccinul:" << this->nrCentreVaccinare << endl;
        cout << "Stocul din centrele de vaccinare:";
        for (int i = 0; i < this->nrCentreVaccinare; i++)
        {
            cout << this->stocVaccinInCentreleDeVaccinare[i] << " ; ";
        }
        cout << endl;
    }

    //functie statica petru a afisa daca un vaccin necesita refrigerare sau nu
    static void verificaNecesitateRefrigerare(VaccinCovid vaccin)
    {
        if (vaccin.necesitaRefrigerare)
        {
            cout << "Vaccinul " << vaccin.numeVaccin << " necesita refrigerare." << endl;
        }
        else
        {
            cout << "Vaccinul " << vaccin.numeVaccin << " nu necesita refrigerare." << endl;
        }
    }

    //functie statica pentru afisarea atributului static
    static string getNumeAfectiune()
    {
        return numeAfectiune;
    }

    //functie statica pentru modificarea atributului static
    static void setNumeAfectiune(string numeAfectiuneNoua)
    {
        numeAfectiune = numeAfectiuneNoua;
    }
};

string VaccinCovid::numeAfectiune = "COVID-19";




class Pacient
{
private:
    const string CNP;

    string numePrenume;
    int varsta;
    float greutate;
    bool esteInternat;
    int nrSpitalizari;
    float* costuriSpitalizare;

    static int taxaAsigurareMedicala;
public:


    //constructor cu toti parametrii
    Pacient(string CNP, string numePrenume, int varsta, float greutate, bool esteInternat, int nrSpitalizari, float* costuriSpitalizare) :CNP(CNP)
    {
        this->numePrenume = numePrenume;
        this->varsta = varsta;
        this->greutate = greutate;
        this->esteInternat = esteInternat;
        this->nrSpitalizari = nrSpitalizari;
        this->costuriSpitalizare = new float[this->nrSpitalizari];
        for (int i = 0; i < this->nrSpitalizari; i++)
        {
            this->costuriSpitalizare[i] = costuriSpitalizare[i];
        }
    }


    //constructor cu un parametru
    Pacient(string numePrenume) :CNP("0")
    {
        this->numePrenume = numePrenume;
        this->varsta = 0;
        this->greutate = 0;
        this->esteInternat = 0;
        this->nrSpitalizari = 0;
        this->costuriSpitalizare = NULL;
    }


    //constructor fara parametrii
    Pacient() :CNP("0")
    {
        this->numePrenume = "Anonim";
        this->varsta = 0;
        this->greutate = 0;
        this->esteInternat = 0;
        this->nrSpitalizari = 0;
        this->costuriSpitalizare = NULL;
    }


    //destructori
    ~Pacient()
    {
        if (this->costuriSpitalizare != NULL)
        {
            delete[] this->costuriSpitalizare;
        }
    }


    //constructor copiere
    Pacient(const Pacient& obj) :CNP(obj.CNP)
    {
        this->numePrenume = obj.numePrenume;
        this->varsta = obj.varsta;
        this->greutate = obj.greutate;
        this->esteInternat = obj.esteInternat;
        this->nrSpitalizari = obj.nrSpitalizari;
        this->costuriSpitalizare = new float[this->nrSpitalizari];
        for (int i = 0; i < this->nrSpitalizari; i++)
        {
            this->costuriSpitalizare[i] = obj.costuriSpitalizare[i];
        }
    }


    //operatorul =
    Pacient& operator=(const Pacient obj)
    {
        this->numePrenume = obj.numePrenume;
        this->varsta = obj.varsta;
        this->greutate = obj.greutate;
        this->esteInternat = obj.esteInternat;
        this->nrSpitalizari = obj.nrSpitalizari;
        this->costuriSpitalizare = new float[this->nrSpitalizari];
        for (int i = 0; i < this->nrSpitalizari; i++)
        {
            this->costuriSpitalizare[i] = obj.costuriSpitalizare[i];
        }
        return *this;
    }

    //operatorul +=
    //CERINTA: SA SE ADAUGE INCA UN COST DE SPITALIZARE IN VECTOR
    Pacient& operator+=(float costuriSpitalizareNou)
    {
        Pacient copie(*this);

        if (this->costuriSpitalizare != NULL)
        {
            delete[] this->costuriSpitalizare;
        }

        this->nrSpitalizari++;

        this->costuriSpitalizare = new float[this->nrSpitalizari];

        for (int i = 0;i < copie.nrSpitalizari;i++)
        {
            this->costuriSpitalizare[i] = copie.costuriSpitalizare[i];
        }
        this->costuriSpitalizare[this->nrSpitalizari - 1] = costuriSpitalizareNou;

        return *this;
    }

    //operatorul de indexare
    //CERINTA: AFISATI COSTUL SPITALIZARILOR CU NR 2
    float operator[](int pozitie2)
    {
        if (pozitie2 >= 0 && pozitie2 < this->nrSpitalizari)
        {
            return this->costuriSpitalizare[pozitie2];
        }
        else
        {
            return 0;
        }
    }


    //operatorul >>
    friend istream& operator>>(istream& i, Pacient& obj)
    {
        delete[] obj.costuriSpitalizare;
        cout << "Introduceti numele pacientului: ";
        i >> obj.numePrenume;
        cout << "Introduceti 1 daca pacientul este internat, introduceti 0 daca pacientul nu este internat: ";
        i >> obj.esteInternat;
        cout << "Introduceti varsta: ";
        i >> obj.varsta;
        cout << "Introduceti greutatea: ";
        i >> obj.greutate;
        cout << "Introduceti numarul spitalizarilor: ";
        i >> obj.nrSpitalizari;

        obj.costuriSpitalizare = new float[obj.nrSpitalizari];
        cout << "Introduceti costurile spitalizarilor: ";
        for (int j = 0;j < obj.nrSpitalizari;j++)
        {
            cout << "Cost: ";
            i >> obj.costuriSpitalizare[j];
        }
        return i;
    }

    //operatorul <<
    friend ostream& operator<<(ostream& om, const Pacient& p)
    {
        om << "Nume pacient: " << p.numePrenume << endl;
        om << "Pacientul este internat? (1-DA!/0-NU!): " << p.esteInternat << endl;
        om << "Varsta: " << p.varsta << endl;
        om << "Greutate: " << p.greutate;
        om << "Numar spitalizari: " << p.nrSpitalizari << endl;
        cout << "Costuri: " << endl;
        for (int i = 0;i < p.nrSpitalizari;i++)
        {
            om << p.costuriSpitalizare[i] << endl;
        }
        om << "CNP: " << p.CNP << endl;
        return om;
    }

    //scriere in binar
    void scriereInBinar(fstream& file)
    {
        int nrLiterenumePrenume = this->numePrenume.length();
        file.write((char*)&this->numePrenume, sizeof(int));
        file.write(this->numePrenume.c_str(), nrLiterenumePrenume);
        file.write((char*)&this->esteInternat, sizeof(bool));
        file.write((char*)&this->varsta, sizeof(int));
        file.write((char*)&this->greutate, sizeof(float));
        file.write((char*)&this->nrSpitalizari, sizeof(int));

        for (int i = 0;i < this->nrSpitalizari;i++)
        {
            file.write((char*)&this->costuriSpitalizare[i], sizeof(float));
        }
    }

    //citire din fisier binar
    void citireDinBinar(fstream& file)
    {
        if (this->costuriSpitalizare != NULL)
        {
            delete[] this->costuriSpitalizare;
        }
        int nrLitereNumePrenume;
        file.read((char*)&nrLitereNumePrenume, sizeof(int));
        string aux;
        aux.resize(nrLitereNumePrenume);
        file.read((char*)aux.c_str(), nrLitereNumePrenume);
        this->numePrenume = aux;

        file.read((char*)&this->esteInternat, sizeof(bool));
        file.read((char*)&this->varsta, sizeof(int));
        file.read((char*)&this->greutate, sizeof(float));
        file.read((char*)&this->nrSpitalizari, sizeof(int));

        this->costuriSpitalizare = new float[this->nrSpitalizari];
        for (int i = 0;i < this->nrSpitalizari;i++)
        {
            file.read((char*)&this->costuriSpitalizare[i], sizeof(float));
        }
    }

    //getteri
    string getCNp()
    {
        return this->CNP;
    }

    string getNumePrenume()
    {
        return this->numePrenume;
    }

    int getVarsta()
    {
        return this->varsta;
    }

    float getGreutate()
    {
        return this->esteInternat;
    }

    bool getEsteInternat()
    {
        return this->esteInternat;
    }

    int getNrSpitalizari()
    {
        return this->nrSpitalizari;
    }

    float* getCosturiSpitalizari()
    {
        return this->costuriSpitalizare;
    }


    //setteri
    void setNumePrenume(string numePrenumeNou)
    {
        this->numePrenume = numePrenumeNou;
    }

    void setVarsta(int varstaNoua)
    {
        this->varsta = varstaNoua;
    }

    void setGreutate(float greutateNoua)
    {
        this->greutate = greutateNoua;
    }

    void setEsteInternat(bool esteInternatNou)
    {
        this->esteInternat = esteInternatNou;
    }

    void setSpitalizari(int nrNouSpitalizari, float* costuriNoiSpitalizari)
    {
        if (this->costuriSpitalizare != NULL)
        {
            delete[] this->costuriSpitalizare;
        }
        this->nrSpitalizari = nrNouSpitalizari;
        this->costuriSpitalizare = new float[this->nrSpitalizari];
        for (int i = 0; i < this->nrSpitalizari; i++)
        {
            this->costuriSpitalizare[i] = costuriNoiSpitalizari[i];
        }
    }


    //metoda afisare
    void afisare()
    {
        cout << "CNP=ul pacientului este:" << this->CNP << endl;
        cout << "Numele si prenumele pacientului este:" << this->numePrenume << endl;
        cout << "Varsta este:" << this->varsta << endl;
        cout << "Greutatea este:" << this->greutate << endl;
        cout << "Este internat?:";
        if (this->esteInternat == 1)
        {
            cout << "DA!" << endl;
        }
        else
        {
            cout << "NU!" << endl;
        }
        cout << "Nr spitalizari pacient:" << this->nrSpitalizari << endl;
        cout << "Costul spitalizarilor:";
        for (int i = 0; i < this->nrSpitalizari; i++)
        {
            cout << this->costuriSpitalizare[i] << " ; ";
        }
        cout << endl;
    }

    //functie statica care afiseaza daca un pacient a platit taxa de asigurare sau nu
    static void verificaTaxaAsigurare(Pacient pacient)
    {
        if (pacient.taxaAsigurareMedicala)
        {
            cout << "Pacientul " << pacient.numePrenume << " a platit taxa de asigurare medicala." << endl;
        }
        else
        {
            cout << "Pacientul " << pacient.numePrenume << " nu a platit taxa de asigurare medicala." << endl;
        }
    }

    //functie statica pentru afisarea atributului static
    static int getTaxaAsigurareMedicala()
    {
        return taxaAsigurareMedicala;
    }

    //functie statica pentru modificarea atributului static
    static void setTaxaAsigurareMedicala(int taxaAsigurareMedicalaNoua)
    {
        taxaAsigurareMedicala = taxaAsigurareMedicalaNoua;
    }


    friend void AfisareDetaliiPacient(const Pacient& pacient);
};

//has-a cu vector de obiecte
class Oras
{
private:
    string denumireOras;
    bool esteCapitala;
    const string judet;
    int nrSpitale;
    Spital* vectSpitale;
public:
    //constr fara parametrii
    Oras() :judet("Necunoscuta")
    {
        this->denumireOras = "Necunoscuta";
        this->esteCapitala = 0;
        this->nrSpitale = 0;
        this->vectSpitale = NULL;
    }

    //constr cu parametrii
    Oras(string denumireOras, bool esteCapitala, int nrSpitale, Spital* vectSpitale, string judet) :judet(judet)
    {
        this->denumireOras = denumireOras;
        this->esteCapitala = esteCapitala;
        this->nrSpitale = nrSpitale;
        this->vectSpitale = new Spital[this->nrSpitale];
        for (int i = 0;i < this->nrSpitale;i++)
        {
            this->vectSpitale[i] = vectSpitale[i];
        }
    }

    //destructor
    ~Oras()
    {
        if (this->vectSpitale != NULL)
        {
            delete[] this->vectSpitale;
        }
    }

    //constructor de copiere
    Oras(const Oras& obj)
    {
        this->denumireOras = obj.denumireOras;
        this->esteCapitala = obj.esteCapitala;
        this->nrSpitale = obj.nrSpitale;
        this->vectSpitale = new Spital[this->nrSpitale];
        for (int i = 0;i < this->nrSpitale;i++)
        {
            this->vectSpitale[i] = obj.vectSpitale[i];
        }
    }

    //operatorul =
    Oras& operator=(const Oras& obj)
    {
        if (this->vectSpitale != NULL)
        {
            delete[] this->vectSpitale;
        }
        this->denumireOras = obj.denumireOras;
        this->esteCapitala = obj.esteCapitala;
        this->nrSpitale = obj.nrSpitale;
        this->vectSpitale = new Spital[this->nrSpitale];
        for (int i = 0;i < this->nrSpitale;i++)
        {
            this->vectSpitale[i] = obj.vectSpitale[i];
        }
        return *this;
    }
    //operatorul <<
    friend ostream& operator<<(ostream& out, const Oras& obj)
    {
        out << "Denumire oras: " << obj.denumireOras << endl;
        out << "Este capitala? (1-DA!/0-NU!): " << obj.esteCapitala << endl;
        out << "Numarul spitalelor: " << obj.nrSpitale;
        out << "Spitale:" << endl;
        for (int i = 0;i < obj.nrSpitale;i++)
        {
            out << obj.vectSpitale[i] << endl;
        }
        return out;
    }

    //operatorul >>
    friend istream& operator>>(istream& ie, Oras& obj)
    {
        cout << "Introduceti denumirea orasului:";
        ie >> obj.denumireOras;

        cout << "Introduceti 1 daca orasul este capitala si 0 daca orasul nu este capitala:";
        ie >> obj.esteCapitala;

        cout << "Introduceti numarul de spitale din oras: ";
        ie >> obj.nrSpitale;

        if (obj.vectSpitale != NULL)
        {
            delete[] obj.vectSpitale;
        }

        obj.vectSpitale = new Spital[obj.nrSpitale];

        cout << "Introduceti spitalele: " << endl;
        for (int i = 0; i < obj.nrSpitale; i++)
        {
            ie >> obj.vectSpitale[i];
        }

        return ie;
    }

    //operatorul de indexare
    //Cerinta: SA SE AFISEZE SPITALUL DE PE POZITIA 3
    Spital operator[](int pozDorita)
    {
        if (pozDorita >= 0 && pozDorita < this->nrSpitale)
        {
            return this->vectSpitale[pozDorita];
        }
    }

    //metoda adauga in vector
    void adaugaSpitalInOras(Spital spitalNou)
    {
        Oras copie = *this;

        if (this->vectSpitale != NULL)
        {
            delete[] this->vectSpitale;
        }

        this->nrSpitale++;

        this->vectSpitale = new Spital[this->nrSpitale];

        for (int i = 0; i < copie.nrSpitale; i++)
        {
            this->vectSpitale[i] = copie.vectSpitale[i];
        }

        this->vectSpitale[this->nrSpitale - 1] = spitalNou;
    }

    //getteri
    string getDenumireOras()
    {
        return this->denumireOras;
    }

    int getNrSpitale()
    {
        return this->nrSpitale;
    }

    bool getEsteCapitala()
    {
        return this->esteCapitala;
    }

    string getJudet()
    {
        return this->judet;
    }

    Spital* getVectSpitale()
    {
        return this->vectSpitale;
    }

    //setteri
    void setDenumireOras(string denumireNouaOras)
    {
        this->denumireOras = denumireNouaOras;
    }


    void setEsteCapitala(bool esteCapitalaNou)
    {
        this->esteCapitala = esteCapitalaNou;
    }

    void setSpitale(int nrSpitaleNou, Spital* vectSpitaleNou)
    {
        if (this->vectSpitale != NULL)
        {
            delete[] this->vectSpitale;
        }
        this->nrSpitale = nrSpitaleNou;

        this->vectSpitale = new Spital[this->nrSpitale];
        for (int i = 0;i < this->nrSpitale;i++)
        {
            this->vectSpitale[i] = vectSpitaleNou[i];
        }
    }
};

int Pacient::taxaAsigurareMedicala = 1800;

void AfisareDetaliiSpital(const Spital& spital)
{
    cout << "Detalii despre spital:" << endl;
    cout << "Nume spital: " << spital.denumireSpital << endl;
    cout << "Oras spital: " << spital.orasSpital << endl;
    cout << "Suprafata in mp a spitalului: " << spital.suprafataMp << " mp" << endl;
    cout << "Numarul de medici din spital: " << spital.nrMedici << endl;
    cout << "Numele medicilor din spital:";
    for (int i = 0; i < spital.nrMedici; i++)
    {
        cout << " " << spital.numeMedici[i];
    }
    cout << endl;
    cout << "Exista pacienti la ATI? " << (spital.existaPacientiLaAti ? "DA" : "NU") << endl;
}


void AfisareDetaliiPacient(const Pacient& pacient)
{
    cout << "Detalii despre pacient:" << endl;
    cout << "CNP: " << pacient.CNP << endl;
    cout << "Nume si prenume: " << pacient.numePrenume << endl;
    cout << "Varsta: " << pacient.varsta << " ani" << endl;
    cout << "Greutate: " << pacient.greutate << " kg" << endl;
    cout << "Este internat? " << (pacient.esteInternat ? "DA" : "NU") << endl;
    cout << "Numar spitalizari: " << pacient.nrSpitalizari << endl;
    cout << "Costurile spitalizarii:";
    for (int i = 0; i < pacient.nrSpitalizari; i++)
    {
        cout << " " << pacient.costuriSpitalizare[i] << " RON";
    }
    cout << endl;
}


//relatia is-a
class SpitalPrivat : public Spital
{
private:
    int nrSectii;
    string* tipuriSectii;

public:
    //constructor fara parametrii
    SpitalPrivat() :Spital()
    {
        this->nrSectii = 0;
        this->tipuriSectii = NULL;
    }
    //constructor cu toti parametrii
    SpitalPrivat(int nrSectii, string* tipuriSectii, int anConstructie, string denumireSpital, const char* orasSpital, float suprafataMp, int nrMedici, string* numeMedici, bool existaPacientiLaAti)
        : Spital(anConstructie, denumireSpital, orasSpital, suprafataMp, nrMedici, numeMedici, existaPacientiLaAti)
    {
        this->nrSectii = nrSectii;
        this->tipuriSectii = new string[this->nrSectii];
        for (int i = 0; i < this->nrSectii; i++)
        {
            this->tipuriSectii[i] = tipuriSectii[i];
        }
    }

    //constructor de copiere
    SpitalPrivat(const SpitalPrivat& spitalPrivat) :Spital(spitalPrivat)
    {
        this->nrSectii = spitalPrivat.nrSectii;
        this->tipuriSectii = new string[this->nrSectii];
        for (int i = 0;i < this->nrSectii;i++)
        {
            this->tipuriSectii[i] = tipuriSectii[i];
        }
    }

    //operatorul =
    SpitalPrivat& operator=(const SpitalPrivat& spital)
    {
        if (this != &spital)
        {
            Spital::operator<=(spital);
            if (this->tipuriSectii != NULL)
            {
                delete[] this->tipuriSectii;
            }
            this->nrSectii = spital.nrSectii;
            this->tipuriSectii = new string[this->nrSectii];
            for (int i = 0;i < this->nrSectii;i++)
            {
                this->tipuriSectii[i] = spital.tipuriSectii[i];
            }
        }
        return *this;

    }

    //operatorul <<
    friend ostream& operator<<(ostream& po, SpitalPrivat& obj)
    {
        po << "Numar sectii: " << obj.nrSectii << endl;
        po << "Tipuri sectii: " << endl;
        for (int i = 0;i < obj.nrSectii;i++)
        {
            po << obj.tipuriSectii[i];
        }
        return po;
    }

    //operatorul >>
    friend istream& operator>>(istream& ia, SpitalPrivat& obj)
    {
        if (obj.tipuriSectii != NULL)
        {
            delete[] obj.tipuriSectii;
        }
        cout << "Introduceti numarul de sectii: ";
        ia >> obj.nrSectii;
        cout << "Introduceti tipurile de sectii: ";
        ia >> obj.nrSectii;
        cout << "Introduceti tipurile de sectii: ";
        obj.tipuriSectii = new string[obj.nrSectii];
        for (int i = 0;i < obj.nrSectii;i++)
        {
            ia >> obj.tipuriSectii[i];
        }
        return ia;
    }

    //destructor
    ~SpitalPrivat()
    {
        if (this->tipuriSectii != NULL)
        {
            delete[] this->tipuriSectii;
        }
    }

    //getteri
    int getNrSpitale()
    {
        return this->nrSectii;
    }
    string* getTipuriSpitale()
    {
        return this->tipuriSectii;
    }

    //setteri
    void setSpitale1(int nrSpitaleNou, string* tipuriSpitaleNoi)
    {
        if (this->tipuriSectii != NULL)
        {
            delete[] this->tipuriSectii;
        }
        this->nrSectii = nrSpitaleNou;
        this->tipuriSectii = tipuriSpitaleNoi;

        for (int i = 0;i < this->nrSectii;i++)
        {
            this->tipuriSectii[i] = tipuriSectii[i];
        }
    }

    //metode
    //metoda pentru afisarea tuturor tipurilor de sectii
    void afiseazaTipuriSectii()
    {
        cout << "Tipuri de sectii in Spitalul Privat:" << endl;
        for (int i = 0; i < nrSectii; i++)
        {
            cout << tipuriSectii[i] << endl;
        }
    }


};

void main()
{
    //Clasa Spital:

    cout << "Toate spitalele au autorizatie de functionare?:";
    if (Spital::getAutorizatieFunctionare() == 1)
    {
        cout << "DA!" << endl;
    }
    else
    {
        cout << "NU!" << endl;
    }


    string nume[] = { "Matei", "Vasilescu", "Ciolacu", "Marin", "Diaconu" };
    Spital s1(1975, "MarieCurie", "Bucuresti", 150.7, 5, nume, 0);
    cout << "An constructie s1: " << s1.getAnConstructie() << endl;
    cout << "Denumire spital s1: " << s1.getDenumireSpital() << endl;
    cout << "Oras spital s1: " << s1.getOrasSpital() << endl;
    cout << "Suprafata m^2 s1: " << s1.getSuprafataMp() << endl;
    cout << "Numar medici s1: " << s1.getNrMedici() << endl;
    cout << "Numele medicilor s1: ";
    for (int i = 0; i < s1.getNrMedici(); i++)
    {
        cout << s1.getNumeMedici()[i] << " ; ";
    }
    cout << endl;
    cout << "Exista pacienti la ATI s1: ";
    if (s1.getExistaPacientiLaAti() == 1)
    {
        cout << "DA!" << endl;
    }
    else
    {
        cout << "NU!" << endl;
    }
    cout << endl << endl;


    Spital s2;
    cout << "An constructie s2: " << s2.getAnConstructie() << endl;
    cout << "Denumire spital s2: " << s2.getDenumireSpital() << endl;
    cout << "Oras spital s2: " << s2.getOrasSpital() << endl;
    cout << "Suprafata m^2 s2: " << s2.getSuprafataMp() << endl;
    cout << "Numar medici s2: " << s2.getNrMedici() << endl;
    cout << "Numele medicilor s2: ";
    for (int i = 0; i < s2.getNrMedici(); i++)
    {
        cout << s2.getNumeMedici()[i] << " ; ";
    }
    cout << endl;
    cout << "Exista pacienti la ATI s2: ";
    if (s2.getExistaPacientiLaAti() == 1)
    {
        cout << "DA!" << endl;
    }
    else
    {
        cout << "NU!" << endl;
    }
    cout << endl << endl;


    Spital s3("SfantaMaria", 305.5);
    cout << "An constructie s3: " << s3.getAnConstructie() << endl;
    cout << "Denumire spital s3: " << s3.getDenumireSpital() << endl;
    cout << "Oras spital s3: " << s3.getOrasSpital() << endl;
    cout << "Suprafata m^2 s3: " << s3.getSuprafataMp() << endl;
    cout << "Numar medici s3: " << s3.getNrMedici() << endl;
    cout << "Numele medicilor s3: ";
    for (int i = 0; i < s3.getNrMedici(); i++)
    {
        cout << s3.getNumeMedici()[i] << " ; ";
    }
    cout << endl;
    cout << "Exista pacienti la ATI s3: ";
    if (s3.getExistaPacientiLaAti() == 1)
    {
        cout << "DA!" << endl;
    }
    else
    {
        cout << "NU!" << endl;
    }
    cout << endl << endl << endl;




    cout << "Spitalul s1: " << endl;
    s1.afisare();
    Spital::AfisareAutorizatieFunctionare(s1);
    s1.setAutorizatieFunctionare;
    cout << endl << endl;

    cout << "Spitalul s2: " << endl;
    s2.afisare();
    Spital::AfisareAutorizatieFunctionare(s2);
    s2.setAutorizatieFunctionare;
    cout << endl << endl;

    cout << "Spitalul s3: " << endl;
    s3.afisare();
    Spital::AfisareAutorizatieFunctionare(s3);
    s3.setAutorizatieFunctionare;
    cout << endl << endl;


    cout << "Spitalul s2 inainte de a fi modificat pe baza setterilor: " << endl;
    s2.afisare();
    cout << endl << endl;

    s2.setDenumireSpital("Obregia");
    s2.setOrasSpital("Bucuresti");
    s2.setSuprafataMp(499.3);
    string nume1[] = { "Roxana", "Gheorghe", "Marin", "Dragomir" };
    s2.setMedici(4, nume1);
    s2.setExistaPacientiLaAti(1);

    cout << "Spitalul s2 dupa ce a fost modificat pe baza setterilor: " << endl;
    s2.afisare();
    cout << endl << endl << endl << endl;

    cout << "!!!!!!!!!!!!!!!!!!!!!!!!! APELUL CONSTRUCTORULUI DE COPIERE !!!!!!!!!!!!!!!!!!!!!" << endl;
    Spital s4(s1);
    cout << "Obiectul v1 sablon (care deja exista): " << endl;
    cout << "An constructie s1: " << s1.getAnConstructie() << endl;
    cout << "Denumire spital s1: " << s1.getDenumireSpital() << endl;
    cout << "Oras spital s1: " << s1.getOrasSpital() << endl;
    cout << "Suprafata m^2 s1: " << s1.getSuprafataMp() << endl;
    cout << "Numar medici s1: " << s1.getNrMedici() << endl;
    cout << "Numele medicilor s1: ";
    for (int i = 0; i < s1.getNrMedici(); i++)
    {
        cout << s1.getNumeMedici()[i] << " ; ";
    }
    cout << endl;
    cout << "Exista pacienti la ATI s1: ";
    if (s1.getExistaPacientiLaAti() == 1)
    {
        cout << "DA!" << endl;
    }
    else
    {
        cout << "NU!" << endl;
    }
    cout << endl << endl;

    cout << "Obiectul nou s4:" << endl;
    cout << "An constructie s4: " << s4.getAnConstructie() << endl;
    cout << "Denumire spital s4: " << s4.getDenumireSpital() << endl;
    cout << "Oras spital s4: " << s4.getOrasSpital() << endl;
    cout << "Suprafata m^2 s4: " << s4.getSuprafataMp() << endl;
    cout << "Numar medici s4: " << s4.getNrMedici() << endl;
    cout << "Numele medicilor s4: ";
    for (int i = 0; i < s1.getNrMedici(); i++)
    {
        cout << s4.getNumeMedici()[i] << " ; ";
    }
    cout << endl;
    cout << "Exista pacienti la ATI s1: ";
    if (s1.getExistaPacientiLaAti() == 1)
    {
        cout << "DA!" << endl;
    }
    else
    {
        cout << "NU!" << endl;
    }
    cout << endl << endl << endl << endl << endl << endl;

    cout << "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! APELUL OPERATORULUI = !!!!!!!!!!!!!!!!!!!!!!!!!!!!!" << endl;
    cout << "Obiectul s3 inainte de modificari:" << endl;
    cout << "An constructie s3: " << s3.getAnConstructie() << endl;
    cout << "Denumire spital s3: " << s3.getDenumireSpital() << endl;
    cout << "Oras spital s3: " << s3.getOrasSpital() << endl;
    cout << "Suprafata m^2 s3: " << s3.getSuprafataMp() << endl;
    cout << "Numar medici s3: " << s3.getNrMedici() << endl;
    cout << "Numele medicilor s3: ";
    for (int i = 0; i < s3.getNrMedici(); i++)
    {
        cout << s3.getNumeMedici()[i] << " ; ";
    }
    cout << endl;
    cout << "Exista pacienti la ATI s3: ";
    if (s3.getExistaPacientiLaAti() == 1)
    {
        cout << "DA!" << endl;
    }
    else
    {
        cout << "NU!" << endl;
    }
    cout << endl << endl << endl;

    s3 = s1;
    cout << "Obiectul sablon s1:" << endl;
    cout << "An constructie s1: " << s1.getAnConstructie() << endl;
    cout << "Denumire spital s1: " << s1.getDenumireSpital() << endl;
    cout << "Oras spital s1: " << s1.getOrasSpital() << endl;
    cout << "Suprafata m^2 s1: " << s1.getSuprafataMp() << endl;
    cout << "Numar medici s1: " << s1.getNrMedici() << endl;
    cout << "Numele medicilor s1: ";
    for (int i = 0; i < s1.getNrMedici(); i++)
    {
        cout << s1.getNumeMedici()[i] << " ; ";
    }
    cout << endl;
    cout << "Exista pacienti la ATI s1: ";
    if (s1.getExistaPacientiLaAti() == 1)
    {
        cout << "DA!" << endl;
    }
    else
    {
        cout << "NU!" << endl;
    }
    cout << endl << endl << endl;
    cout << "Obiectul s3 dupa modificari:";
    cout << "An constructie s1: " << s1.getAnConstructie() << endl;
    cout << "Denumire spital s1: " << s1.getDenumireSpital() << endl;
    cout << "Oras spital s1: " << s1.getOrasSpital() << endl;
    cout << "Suprafata m^2 s1: " << s1.getSuprafataMp() << endl;
    cout << "Numar medici s1: " << s1.getNrMedici() << endl;
    cout << "Numele medicilor s1: ";
    for (int i = 0; i < s1.getNrMedici(); i++)
    {
        cout << s1.getNumeMedici()[i] << " ; ";
    }
    cout << endl;
    cout << "Exista pacienti la ATI s1: ";
    if (s1.getExistaPacientiLaAti() == 1)
    {
        cout << "DA!" << endl;
    }
    else
    {
        cout << "NU!" << endl;
    }



    cout << endl << endl << endl << endl << endl << endl << endl;

    //cout << "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! SUPRAINCARCAREA OPERATORULUI <= !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" << endl;
    //s1 <= s3;
    //cout << "Suprafata spitalului s1:" << s1.getSuprafataMp() << endl;
    //cout << "Suprafata spitalului s3:" << s3.getSuprafataMp() << endl;
    //cout << "Suprafata spitalului s1 este <= suprafata spitalului s3? (1-ADEVARAT; 0-FALS)" << (s1 <= s3) << endl;
    //if (s1 <= s3)
    //{
    //    cout << "Suprafata spitalului s1 este <= suprafata spitalului s2" << endl;
    //}
    //else
    //{
    //    cout << "Suprafata spitalului s1 este >= suprafata spitalului s3" << endl;
    //}
    //cout << endl << endl << endl;

    //cout << "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! SUPRAINCARCAREA OPERATORULUI [] !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" << endl;
    //cout << "Numele medicului cu indexul 2 din spitalul s1 este:" << s1[2] << endl;
    //cout << "Numele medicului cu indexul 2 din spitalul s1 este:" << s1[7] << endl;

    //cout << endl << endl << endl;

    //cout << "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! SUPRAINCARCAREA OPERATORULUI DE NEGATIE !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" << endl;
    //cout << "Spitalul s3 are pacienti la ATI? (1-DA! / 0-NU!)" << s3.getExistaPacientiLaAti() << endl;
    //!s3;
    //cout << "Spitalul s3 are pacienti la ATI? (1-DA! / 0-NU!)" << s3.getExistaPacientiLaAti() << endl;
    //cout << endl << endl << endl;


    ///*cout << "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! SUPRAINCARCAREA OPERATORULUI >> !!!!!!!!!!!!!!!!!!!!!!!!" << endl;
    //cin >> s1;
    //cout << endl << endl << endl;*/

    //cout << "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! SUPRAINCARCAREA OPERATORULUI << !!!!!!!!!!!!!!!!!!!!!!!!" << endl;
    //cout << s3;
    //cout << endl << endl << endl;

    //vector Spital
    /*int nrSpitale;
    cout << endl << "Introduceti numarul spitalelor: ";
    cin >> nrSpitale;
    Spital* vectorSpitale = new Spital[nrSpitale];
    for (int i = 0;i < nrSpitale;i++)
    {
        cout << endl << "Informatii spitale " << i + 1 << ":" << endl;
        cin >> vectorSpitale[i];
    }
    for (int i = 0;i < nrSpitale;i++)
    {
        cout << vectorSpitale[i] << endl;
    }
    delete[] vectorSpitale;
    cout << endl << endl << endl << endl << endl << endl;
    */

    /*cout << endl << endl << endl;
    cout << "!!!!!!!!!!!!!!!!!!!!!!!!!!!!! FISIERE TEXT !!!!!!!!!!!!!!!!!!" << endl;
    ofstream f1("SpitaleFisierText.txt", ios::out);
    f1 << s1;
    f1.close();

    ifstream f2("SPITALE.txt", ios::in);
    cout << "Obiectul s3 inainte de a fi citit din fisierul text:" << endl << s2 << endl << endl;
    f2 >> s2;
    f1.close();

    cout << "Obiectul dupa ce a fost citit din fisierul text:" << endl << s2 << endl << endl;*/

    //Clasa VaccinCovid

    cout << "Numele afectiunii pentru care se foloseste vaccinul este: " << VaccinCovid::getNumeAfectiune() << endl;


    int stoc[] = { 150,70,90,100,40,12 };
    VaccinCovid v1(0, "AstraZeneca", 0.7, 2, 1, 6, stoc);
    cout << "Temperatura de pastrare in grade celsius a vaccinului v1: " << v1.getTemperaturaPastrareCelsius() << endl;
    cout << "Nume vaccin v1: " << v1.getNumeVaccin() << endl;
    cout << "Eficacitate vaccin v1: " << v1.getEficacitate() << endl;
    cout << "Numar doze vaccin v1: " << v1.getNrDoze() << endl;
    cout << "Necesita refrigerare vaccinul v1: ";
    if (v1.getNecesitaRefrigerare() == 1)
    {
        cout << "DA!" << endl;
    }
    else
    {
        cout << "NU!" << endl;
    }
    cout << "Nr de centre de vaccinare in care se regaseste vaccinul v1: " << v1.getNrCentreVaccinare() << endl;
    cout << "Stocul existent in centrele de vaccinare pentru vaccinul v1: ";
    for (int i = 0; i < v1.getNrCentreVaccinare(); i++)
    {
        cout << v1.getStocVaccinInCentreleDeVaccinare()[i] << " ; ";
    }
    cout << endl << endl;


    VaccinCovid v2(0.65, 1, 1);
    cout << "Temperatura de pastrare in grade celsius a vaccinului v2: " << v2.getTemperaturaPastrareCelsius() << endl;
    cout << "Nume vaccin v2: " << v2.getNumeVaccin() << endl;
    cout << "Eficacitate vaccin v2: " << v2.getEficacitate() << endl;
    cout << "Numar doze vaccin v2: " << v2.getNrDoze() << endl;
    cout << "Necesita refrigerare vaccinul v2: ";
    if (v2.getNecesitaRefrigerare() == 1)
    {
        cout << "DA!" << endl;
    }
    else
    {
        cout << "NU!" << endl;
    }
    cout << "Nr de centre de vaccinare in care se regaseste vaccinul v2: " << v2.getNrCentreVaccinare() << endl;
    cout << "Stocul existent in centrele de vaccinare pentru vaccinul v2: ";
    for (int i = 0; i < v2.getNrCentreVaccinare(); i++)
    {
        cout << v2.getStocVaccinInCentreleDeVaccinare()[i] << " ; ";
    }
    cout << endl << endl;


    VaccinCovid v3;
    cout << "Temperatura de pastrare in grade celsius a vaccinului v3: " << v3.getTemperaturaPastrareCelsius() << endl;
    cout << "Nume vaccin v3: " << v3.getNumeVaccin() << endl;
    cout << "Eficacitate vaccin v3: " << v3.getEficacitate() << endl;
    cout << "Numar doze vaccin v3: " << v3.getNrDoze() << endl;
    cout << "Necesita refrigerare vaccinul v3: ";
    if (v3.getNecesitaRefrigerare() == 1)
    {
        cout << "DA!" << endl;
    }
    else
    {
        cout << "NU!" << endl;
    }
    cout << "Nr de centre de vaccinare in care se regaseste vaccinul v3: " << v3.getNrCentreVaccinare() << endl;
    cout << "Stocul existent in centrele de vaccinare pentru vaccinul v3: ";
    for (int i = 0; i < v3.getNrCentreVaccinare(); i++)
    {
        cout << v3.getStocVaccinInCentreleDeVaccinare()[i] << " ; ";
    }
    cout << endl << endl;
    VaccinCovid vaccinuri[] = { v1, v2, v3 };
    int numarVaccinuri = 3;
    cout << endl << endl;


    cout << "Vaccinul v1: " << endl;
    v1.afisare();
    VaccinCovid::verificaNecesitateRefrigerare(v1);
    cout << endl << endl;

    cout << "Vaccinul v2: " << endl;
    v2.afisare();
    VaccinCovid::verificaNecesitateRefrigerare(v2);
    cout << endl << endl;

    cout << "Vaccinul v3: " << endl;
    v3.afisare();
    VaccinCovid::verificaNecesitateRefrigerare(v3);
    v3.setNumeAfectiune;
    cout << endl << endl;
    cout << endl << endl << endl;


    cout << "Vaccinul v3 inainte de a fi modificat pe baza setterilor: " << endl;
    v3.afisare();
    cout << endl << endl;

    v3.setNumeVaccin("Pfizer");
    v3.setNrDoze(3);
    v3.setEficacitate(0.9);
    v3.setNecesitaRefrigerare(1);
    int stoc1[] = { 240,900,356 };
    v3.setStocVaccine(3, stoc1);

    cout << "Vaccinul v3 dupa ce a fost modificat pe baza setterilor: " << endl;
    v3.afisare();
    cout << endl << endl << endl << endl;

    cout << "!!!!!!!!!!!!!!!!!!!!!!!!!!!! APELUL CONSTRUCTORULUI DE COPIERE !!!!!!!!!!!!!!!!!!!!!!!!!" << endl;
    VaccinCovid v4(v1);

    cout << "Obiectul v1 sablon (care deja exista):";
    cout << "Temperatura de pastrare in grade celsius a vaccinului v1: " << v1.getTemperaturaPastrareCelsius() << endl;
    cout << "Nume vaccin v1: " << v1.getNumeVaccin() << endl;
    cout << "Eficacitate vaccin v1: " << v1.getEficacitate() << endl;
    cout << "Numar doze vaccin v1: " << v1.getNrDoze() << endl;
    cout << "Necesita refrigerare vaccinul v1: ";
    if (v1.getNecesitaRefrigerare() == 1)
    {
        cout << "DA!" << endl;
    }
    else
    {
        cout << "NU!" << endl;
    }
    cout << "Nr de centre de vaccinare in care se regaseste vaccinul v1: " << v1.getNrCentreVaccinare() << endl;
    cout << "Stocul existent in centrele de vaccinare pentru vaccinul v1: ";
    for (int i = 0; i < v1.getNrCentreVaccinare(); i++)
    {
        cout << v1.getStocVaccinInCentreleDeVaccinare()[i] << " ; ";
    }
    cout << endl << endl;

    cout << "Obiectul nou v4:" << endl;
    cout << "Temperatura de pastrare in grade celsius a vaccinului v4: " << v4.getTemperaturaPastrareCelsius() << endl;
    cout << "Nume vaccin v4: " << v4.getNumeVaccin() << endl;
    cout << "Eficacitate vaccin v4: " << v4.getEficacitate() << endl;
    cout << "Numar doze vaccin v4: " << v4.getNrDoze() << endl;
    cout << "Necesita refrigerare vaccinul v4: ";
    if (v1.getNecesitaRefrigerare() == 1)
    {
        cout << "DA!" << endl;
    }
    else
    {
        cout << "NU!" << endl;
    }
    cout << "Nr de centre de vaccinare in care se regaseste vaccinul v4: " << v4.getNrCentreVaccinare() << endl;
    cout << "Stocul existent in centrele de vaccinare pentru vaccinul v4: ";
    for (int i = 0; i < v4.getNrCentreVaccinare(); i++)
    {
        cout << v4.getStocVaccinInCentreleDeVaccinare()[i] << " ; ";
    }
    cout << endl << endl << endl;
    cout << "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! APELUL OPERATORULUI = !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" << endl;
    cout << "Obiectul v2 inainte de modificari:" << endl;
    cout << "Temperatura de pastrare in grade celsius a vaccinului v2: " << v2.getTemperaturaPastrareCelsius() << endl;
    cout << "Nume vaccin v2: " << v2.getNumeVaccin() << endl;
    cout << "Eficacitate vaccin v2: " << v2.getEficacitate() << endl;
    cout << "Numar doze vaccin v2: " << v2.getNrDoze() << endl;
    cout << "Necesita refrigerare vaccinul v2: ";
    if (v2.getNecesitaRefrigerare() == 1)
    {
        cout << "DA!" << endl;
    }
    else
    {
        cout << "NU!" << endl;
    }
    cout << "Nr de centre de vaccinare in care se regaseste vaccinul v2: " << v2.getNrCentreVaccinare() << endl;
    cout << "Stocul existent in centrele de vaccinare pentru vaccinul v2: ";
    for (int i = 0; i < v2.getNrCentreVaccinare(); i++)
    {
        cout << v2.getStocVaccinInCentreleDeVaccinare()[i] << " ; ";
    }
    cout << endl << endl << endl;

    v2 = v1;

    cout << "Obiectul sablon v1:" << endl;
    cout << "Temperatura de pastrare in grade celsius a vaccinului v1: " << v1.getTemperaturaPastrareCelsius() << endl;
    cout << "Nume vaccin v1: " << v1.getNumeVaccin() << endl;
    cout << "Eficacitate vaccin v1: " << v1.getEficacitate() << endl;
    cout << "Numar doze vaccin v1: " << v1.getNrDoze() << endl;
    cout << "Necesita refrigerare vaccinul v1: ";
    if (v1.getNecesitaRefrigerare() == 1)
    {
        cout << "DA!" << endl;
    }
    else
    {
        cout << "NU!" << endl;
    }
    cout << "Nr de centre de vaccinare in care se regaseste vaccinul v1: " << v1.getNrCentreVaccinare() << endl;
    cout << "Stocul existent in centrele de vaccinare pentru vaccinul v1: ";
    for (int i = 0; i < v1.getNrCentreVaccinare(); i++)
    {
        cout << v1.getStocVaccinInCentreleDeVaccinare()[i] << " ; ";
    }
    cout << endl << endl << endl;

    cout << "Obiectul v2 dupa modificari:" << endl;
    cout << "Temperatura de pastrare in grade celsius a vaccinului v2: " << v2.getTemperaturaPastrareCelsius() << endl;
    cout << "Nume vaccin v2: " << v2.getNumeVaccin() << endl;
    cout << "Eficacitate vaccin v2: " << v2.getEficacitate() << endl;
    cout << "Numar doze vaccin v2: " << v2.getNrDoze() << endl;
    cout << "Necesita refrigerare vaccinul v2: ";
    if (v2.getNecesitaRefrigerare() == 1)
    {
        cout << "DA!" << endl;
    }
    else
    {
        cout << "NU!" << endl;
    }
    cout << "Nr de centre de vaccinare in care se regaseste vaccinul v2: " << v2.getNrCentreVaccinare() << endl;
    cout << "Stocul existent in centrele de vaccinare pentru vaccinul v2: ";
    for (int i = 0; i < v2.getNrCentreVaccinare(); i++)
    {
        cout << v2.getStocVaccinInCentreleDeVaccinare()[i] << " ; ";
    }
    cout << endl << endl << endl;

    //cout << "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! SUPRAINCARCAREA OPERATORUL ++ (PREINCREMENTARE) !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" << endl;
    //cout << "Numarul de doze al vaccinului v1:" << v1.getNrDoze() << endl;
    //cout << "Numarul de doze al vaccinului v2:" << v2.getNrDoze() << endl;
    //v1 = ++v2;
    //cout << "Numarul de doze al vaccinului v1:" << v1.getNrDoze() << endl;
    //cout << "Numarul de doze al vaccinului v2:" << v2.getNrDoze() << endl;

    //cout << endl << endl << endl;

    //cout << "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! OPERATORUL ++ (POSTINCREMENTARE) !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" << endl;
    //cout << "Numarul de doze al vaccinului v2:" << v2.getNrDoze() << endl;
    //cout << "Numarul de doze al vaccinului v3:" << v3.getNrDoze() << endl;
    //v2 = v3++;
    //cout << "Numarul de doze al vaccinului v2:" << v2.getNrDoze() << endl;
    //cout << "Numarul de doze al vaccinului v3:" << v3.getNrDoze() << endl;

    //cout << "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! SUPRAINCARCAREA OPERATORULUI () !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" << endl;
    //cout << "Exista un numar total de " << v1(70) << " stocuri cu prag mai mare de 70 de produse." << endl;

    //cout << endl << endl << endl;

    //cout << "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! SUPRAINCARCAREA OPERATORULUI <= !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" << endl;
    //cout << "Eficacitatea vaccinului v1: " << v1.getEficacitate() << endl;
    //cout << "Eficacitatea vaccinului v2: " << v2.getEficacitate() << endl;
    //cout << "Eficacitatea vaccinului v1 este <= eficacitatea vaccinului v2? (1-DA!; 0-NU!)" << (v1 <= v2) << endl;

    //if (v1 <= v2)
    //{
    //    cout << "Eficacitatea vaccinului v1 este <= eficacitatea vaccinului v2" << endl;
    //}
    //else
    //{
    //    cout << "Eficacitatea vaccinului v1 este >= eficacitatea vaccinului v2" << endl;
    //}
    //cout << endl << endl << endl;

    ///*cout << "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! SUPRAINCARCAREA OPERATORULUI >> !!!!!!!!!!!!!!!!!!!!!!!!!!!!" << endl;
    //cin >> v2;
    //cout << endl << endl << endl;*/

    //cout << "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! SUPRAINCARCAREA OPERATORULUI << !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" << endl;
    //cout << v1;
    //cout << endl << endl << endl;

   /* cout << "!!!!!!!!!!!!!!!!!!!!!!!!!!!!! FISIERE TEXT !!!!!!!!!!!!!!!!!!" << endl;
    ofstream g1("VaccinCovid.txt", ios::out);
    g1 << v2;
    g1.close();

    ifstream g3("SPITALE.txt", ios::in);
    cout << "Obiectul v3 inainte de a fi citit din fisierul text:" << endl << v2 << endl << endl;
    g3 >> v2;
    g1.close();

    cout << "Obiectul dupa ce a fost citit din fisierul text:" << endl << v2 << endl << endl;*/


    ////vector VaccinCovid
    //int nrVaccinuri;
    //cout << endl << "Introduceti numarul vaccinurilor: ";
    //cin >> nrVaccinuri;
    //VaccinCovid* vectorVaccinCovid = new VaccinCovid[nrVaccinuri];
    //for (int i = 0;i < nrVaccinuri;i++)
    //{
    //    cout << "Informatii vaccinuri: " << i + 1 << ":" << endl;
    //    cin >> vectorVaccinCovid[i];
    //}
    //for (int i = 0;i < nrVaccinuri;i++)
    //{
    //    cout << vectorVaccinCovid[i] << endl;
    //}
    //delete[] vectorVaccinCovid;
    //
    //cout << endl << endl << endl << endl << endl << endl;



    ////Clasa Pacient:

    cout << "Taxa de asigurare medicala: " << Pacient::getTaxaAsigurareMedicala() << endl;


    float spitalizari[] = { 1400.9,560.9,3500.99,300.2 };;
    Pacient p1("2781026483927", "JuncuMarina", 45, 78.5, 1, 4, spitalizari);
    cout << "CNP-ul pacientului p1: " << p1.getCNp() << endl;
    cout << "Nume prenume pacient p1: " << p1.getNumePrenume() << endl;
    cout << "Varsta pacientului p1: " << p1.getVarsta() << endl;
    cout << "Greutatea pacientului p1: " << p1.getGreutate() << endl;
    cout << "Pacientul p1 este internat?:  ";
    if (p1.getEsteInternat() == 1)
    {
        cout << "DA!" << endl;
    }
    else
    {
        cout << "NU!" << endl;
    }
    cout << "Nr de spitalizari ale pacientului p1: " << p1.getNrSpitalizari() << endl;
    cout << "Costul spitalizarilor pacientului p1:";
    for (int i = 0; i < p1.getNrSpitalizari(); i++)
    {
        cout << p1.getCosturiSpitalizari()[i] << " ; ";
    }
    cout << endl << endl;


    Pacient p2("Ghenade Mihai");
    cout << "CNP-ul pacientului p2: " << p2.getCNp() << endl;
    cout << "Nume prenume pacient p2: " << p2.getNumePrenume() << endl;
    cout << "Varsta pacientului p2: " << p2.getVarsta() << endl;
    cout << "Greutatea pacientului p2: " << p2.getGreutate() << endl;
    cout << "Pacientul p2 este internat?:  ";
    if (p2.getEsteInternat() == 1)
    {
        cout << "DA!" << endl;
    }
    else
    {
        cout << "NU!" << endl;
    }
    cout << "Nr de spitalizari ale pacientului p2: " << p2.getNrSpitalizari() << endl;
    cout << "Costul spitalizarilor pacientului p2:";
    for (int i = 0; i < p2.getNrSpitalizari(); i++)
    {
        cout << p2.getCosturiSpitalizari()[i] << " ; ";
    }
    cout << endl << endl;


    Pacient p3;
    cout << "CNP-ul pacientului p3: " << p3.getCNp() << endl;
    cout << "Nume prenume pacient p3: " << p3.getNumePrenume() << endl;
    cout << "Varsta pacientului p3: " << p3.getVarsta() << endl;
    cout << "Greutatea pacientului p3: " << p3.getGreutate() << endl;
    cout << "Pacientul p3 este internat?:  ";
    if (p3.getEsteInternat() == 1)
    {
        cout << "DA!" << endl;
    }
    else
    {
        cout << "NU!" << endl;
    }
    cout << "Nr de spitalizari ale pacientului p3: " << p3.getNrSpitalizari() << endl;
    cout << "Costul spitalizarilor pacientului p3:";
    for (int i = 0; i < p3.getNrSpitalizari(); i++)
    {
        cout << p3.getCosturiSpitalizari()[i] << " ; ";
    }
    cout << endl << endl;


    cout << "Pacientul p1: " << endl;
    p1.afisare();
    Pacient::verificaTaxaAsigurare(p1);
    cout << endl << endl;

    cout << "Pacientul p2: " << endl;
    p2.afisare();
    Pacient::verificaTaxaAsigurare(p2);
    cout << endl << endl;

    cout << "Pacientul p3: " << endl;
    p3.afisare();
    Pacient::verificaTaxaAsigurare(p3);
    cout << endl << endl << endl << endl;


    cout << "Pacientul p3 inainte de a fi modificat pe baza setterilor: " << endl;
    p3.afisare();

    p3.setNumePrenume("IonGheorghe");
    p3.setGreutate(90.8);
    p3.setVarsta(55);
    float spitalizari1[] = { 3300.8,1200.9 };
    p3.setSpitalizari(2, spitalizari1);
    p3.setEsteInternat(0);

    cout << "Pacientul p3 dupa ce a fost modificat pe baza setterilor: " << endl;
    p3.afisare();

    cout << endl << endl << endl << endl;

    cout << "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!APELUL CONSTRUCTORULUI DE COPEIERE!!!!!!!!!!!!!!!!!!!!!!!!!" << endl;
    Pacient p4(p1);
    cout << "Obiectul sablon p1 care deja exista:" << endl;
    cout << "CNP-ul pacientului p1: " << p1.getCNp() << endl;
    cout << "Nume prenume pacient p1: " << p1.getNumePrenume() << endl;
    cout << "Varsta pacientului p1: " << p1.getVarsta() << endl;
    cout << "Greutatea pacientului p1: " << p1.getGreutate() << endl;
    cout << "Pacientul p1 este internat?:  ";
    if (p1.getEsteInternat() == 1)
    {
        cout << "DA!" << endl;
    }
    else
    {
        cout << "NU!" << endl;
    }
    cout << "Nr de spitalizari ale pacientului p1: " << p1.getNrSpitalizari() << endl;
    cout << "Costul spitalizarilor pacientului p1:";
    for (int i = 0; i < p1.getNrSpitalizari(); i++)
    {
        cout << p1.getCosturiSpitalizari()[i] << " ; ";
    }
    cout << endl << endl << endl;

    cout << "Obiectul nou p4:" << endl;
    cout << "CNP-ul pacientului p4: " << p4.getCNp() << endl;
    cout << "Nume prenume pacient p4: " << p4.getNumePrenume() << endl;
    cout << "Varsta pacientului p4: " << p4.getVarsta() << endl;
    cout << "Greutatea pacientului p4: " << p4.getGreutate() << endl;
    cout << "Pacientul p4 este internat?:  ";
    if (p4.getEsteInternat() == 1)
    {
        cout << "DA!" << endl;
    }
    else
    {
        cout << "NU!" << endl;
    }
    cout << "Nr de spitalizari ale pacientului p4: " << p4.getNrSpitalizari() << endl;
    cout << "Costul spitalizarilor pacientului p4:";
    for (int i = 0; i < p4.getNrSpitalizari(); i++)
    {
        cout << p4.getCosturiSpitalizari()[i] << " ; ";
    }
    cout << endl << endl << endl;

    cout << "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! APELUL OPERATORULUI = !!!!!!!!!!!!!!!!!!!!!!!!!!!" << endl;
    cout << "Obiectul p2 inainte de modificari:" << endl;
    cout << "CNP-ul pacientului p2: " << p2.getCNp() << endl;
    cout << "Nume prenume pacient p2: " << p2.getNumePrenume() << endl;
    cout << "Varsta pacientului p2: " << p2.getVarsta() << endl;
    cout << "Greutatea pacientului p2: " << p2.getGreutate() << endl;
    cout << "Pacientul p2 este internat?:  ";
    if (p2.getEsteInternat() == 1)
    {
        cout << "DA!" << endl;
    }
    else
    {
        cout << "NU!" << endl;
    }
    cout << "Nr de spitalizari ale pacientului p2: " << p2.getNrSpitalizari() << endl;
    cout << "Costul spitalizarilor pacientului p2:";
    for (int i = 0; i < p2.getNrSpitalizari(); i++)
    {
        cout << p2.getCosturiSpitalizari()[i] << " ; ";
    }
    cout << endl << endl << endl;
    p2 = p1;

    cout << "Obiectul sablon p1:" << endl;
    cout << "CNP-ul pacientului p1: " << p1.getCNp() << endl;
    cout << "Nume prenume pacient p1: " << p1.getNumePrenume() << endl;
    cout << "Varsta pacientului p1: " << p1.getVarsta() << endl;
    cout << "Greutatea pacientului p1: " << p1.getGreutate() << endl;
    cout << "Pacientul p1 este internat?:  ";
    if (p1.getEsteInternat() == 1)
    {
        cout << "DA!" << endl;
    }
    else
    {
        cout << "NU!" << endl;
    }
    cout << "Nr de spitalizari ale pacientului p1: " << p1.getNrSpitalizari() << endl;
    cout << "Costul spitalizarilor pacientului p1:";
    for (int i = 0; i < p1.getNrSpitalizari(); i++)
    {
        cout << p1.getCosturiSpitalizari()[i] << " ; ";
    }
    cout << endl << endl << endl;

    cout << "Obiectul p2 dupa modificari:" << endl;
    cout << "Obiectul p2 inainte de modificari:" << endl;
    cout << "CNP-ul pacientului p2: " << p2.getCNp() << endl;
    cout << "Nume prenume pacient p2: " << p2.getNumePrenume() << endl;
    cout << "Varsta pacientului p2: " << p2.getVarsta() << endl;
    cout << "Greutatea pacientului p2: " << p2.getGreutate() << endl;
    cout << "Pacientul p2 este internat?:  ";
    if (p2.getEsteInternat() == 1)
    {
        cout << "DA!" << endl;
    }
    else
    {
        cout << "NU!" << endl;
    }
    cout << "Nr de spitalizari ale pacientului p2: " << p2.getNrSpitalizari() << endl;
    cout << "Costul spitalizarilor pacientului p2:";
    for (int i = 0; i < p2.getNrSpitalizari(); i++)
    {
        cout << p2.getCosturiSpitalizari()[i] << " ; ";
    }

    cout << endl << endl << endl;

    /* cout << "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! SUPRAINCARCAREA OPERATORULUI += !!!!!!!!!!!!!!!!!!!!!!!!!!!!" << endl;
     cout << "Pacientul p3 inainde de apelul operatorului +=:" << endl;
     p3.afisare();
     cout << endl << endl;
     p3 += 760.5;
     cout << "Pacientul p3 dupa apelul operatorului +=";
     p3.afisare();
     cout << endl << endl << endl;

     cout << "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! SUPRAINCARCAREA OPERATORULUI [] !!!!!!!!!!!!!!!!!!!!!!!!!!!" << endl;
     cout << "Costul spitalizarilor cu indexul 2 pentru pacientul p1 este: " << p1[2] << endl;
     cout << "Costu spitalizarilor cu indexul 2 pentru pacientul p1 este: " << p1[11];
     cout << endl << endl << endl;*/

     //cout << "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! SUPRAINCARCAREA OPERATORULUI >> !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" << endl;
     //cin >> p1;
     //cout << endl << endl << endl;

     //cout << "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! SUPRAINCARCAREA OPERATORULUI << !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" << endl;
     //cout << p2;
     //cout << endl << endl << endl;

     ////vector Pacienti
     //int nrPacienti;
     //cout << "Introduceti numarul pacientilor: ";
     //cin >> nrPacienti;
     //Pacient* vectorPacienti = new Pacient[nrPacienti];
     //for (int i = 0;i < nrPacienti;i++)
     //{
     //    cout << "Infomatii pacienti: " << i + 1 << ":" << endl;
     //    cin >> vectorPacienti[i];
     //}
     //for (int i = 0;i < nrPacienti;i++)
     //{
     //    cout << vectorPacienti[i] << endl;
     //}
     //delete[] vectorPacienti;

     //const int nrLinii = 2;
     //const int nrColoane = 2;
     //
     //Pacient matricePacient[nrLinii][nrColoane];
     //for (int i = 0;i < nrLinii;i++)
     //{
     //    for (int j = 0;j < nrColoane;j++)
     //    {
     //        cout << "Informatiile pacientului [" << i + 1 << "][" << j + 1 << "]: " << endl;
     //        cin >> matricePacient[i][j];
     //    }
     //}

     //for (int i = 0;i < nrLinii;i++)
     //{
     //    for (int j = 0;j < nrColoane;j++)
     //    {
     //        cout << "Pacientul [" << i + 1 << "][" << j + 1 << "]: " << endl;
     //        cout << matricePacient[i][j] << " ";
     //    }
     //    cout << endl << endl;
     //}



     //cout << endl << endl << endl << endl << endl;

     //AfisareDetaliiSpital(s1);
     //AfisareDetaliiPacient(p1);

    /* fstream f3("PacientiFisierBinar.bin", ios::binary | ios::out);
     p2.scriereInBinar(f3);
     f3.close();

     fstream f4("PacientiFisierBinar.bin", ios::binary | ios::in);
     cout << "Obiectul p3 inainte de a fi citit din fisierul binar: " << endl << p3 << endl << endl;
     p3.citireDinBinar(f4);
     f4.close();
     f4.close();
     cout << "Obiectul p3 dupa ce a fost citit din fisierul binar: " << p3 << endl << endl;*/

     //clasa oras
    Oras o1;
    cout << "Denumirea orasului este: " << o1.getDenumireOras() << endl;
    cout << "Orasul este capitala? (1-DA!/0-NU!): " << o1.getEsteCapitala() << endl;
    cout << "Judetul din care provine orasul: " << o1.getJudet() << endl;
    cout << "Numarul de spitale din oras: " << o1.getNrSpitale() << endl;
    cout << "Spitalele din oras sunt: " << endl;
    for (int i = 0;i < o1.getNrSpitale();i++)
    {
        cout << o1.getVectSpitale()[i] << endl;
    }
    cout << endl << endl << endl;

    Spital vectSpitale1[] = { s1,s2,s3 };
    Oras o2("Bacau", 0, 3, vectSpitale1, "Bacau");
    cout << "Denumirea orasului este: " << o2.getDenumireOras() << endl;
    cout << "Orasul este capitala? (1-DA!/0-NU!): " << o2.getEsteCapitala() << endl;
    cout << "Judetul din care provine orasul: " << o2.getJudet() << endl;
    cout << "Numarul de spitale din oras: " << o2.getNrSpitale() << endl;
    cout << "Spitalele din oras sunt: " << endl;
    for (int i = 0;i < o2.getNrSpitale();i++)
    {
        cout << o2.getVectSpitale()[i] << endl;
    }
    cout << endl << endl << endl << endl << endl;

    cout << "!!!!!!!!!!!!!!!!!!!!!!!!! APELUL SETTERILOR: !!!!!!!!!!!!!!!!!!!!!!!" << endl;
    cout << "Spitalul din orasul 1 inainte de a fi modificat: " << endl;
    cout << "Denumirea orasului este: " << o1.getDenumireOras() << endl;
    cout << "Orasul este capitala? (1-DA!/0-NU!): " << o1.getEsteCapitala() << endl;
    cout << "Judetul din care provine orasul: " << o1.getJudet() << endl;
    cout << "Numarul de spitale din oras: " << o1.getNrSpitale() << endl;
    cout << "Spitalele din oras sunt: " << endl;
    for (int i = 0;i < o1.getNrSpitale();i++)
    {
        cout << o2.getVectSpitale()[i] << endl;
    }
    cout << endl << endl << endl;

    o1.setDenumireOras("Bucuresti");
    o1.setEsteCapitala(1);
    Spital vectSpitale2[] = { s1,s3,s4 };
    o1.setSpitale(3, vectSpitale2);

    cout << "Spitalul din orasul 1 dupa modificari: " << endl;
    cout << "Denumirea orasului este: " << o1.getDenumireOras() << endl;
    cout << "Orasul este capitala? (1-DA!/0-NU!): " << o1.getEsteCapitala() << endl;
    cout << "Judetul din care provine orasul: " << o1.getJudet() << endl;
    cout << "Numarul de spitale din oras: " << o1.getNrSpitale() << endl;
    cout << "Spitalele din oras sunt: " << endl;
    for (int i = 0;i < o1.getNrSpitale();i++)
    {
        cout << o2.getVectSpitale()[i] << endl;
    }
    cout << endl << endl << endl;

    cout << "!!!!!!!!!!!!!!!!!!!!!!!!!! APELUL CONSTRUCTORULUI DE COPIERE !!!!!!!!!!!!!!!!!!!!" << endl;
    Oras o3 = o2;
    cout << "Obiectul macheta o2: " << endl;
    cout << "Denumirea orasului este: " << o2.getDenumireOras() << endl;
    cout << "Orasul este capitala? (1-DA!/0-NU!): " << o2.getEsteCapitala() << endl;
    cout << "Judetul din care provine orasul: " << o2.getJudet() << endl;
    cout << "Numarul de spitale din oras: " << o2.getNrSpitale() << endl;
    cout << "Spitalele din oras sunt: " << endl;
    for (int i = 0;i < o2.getNrSpitale();i++)
    {
        cout << o2.getVectSpitale()[i] << endl;
    }
    cout << endl << endl << endl;

    cout << "Obiectul o3 nou:" << endl;
    cout << "Denumirea orasului este: " << o3.getDenumireOras() << endl;
    cout << "Orasul este capitala? (1-DA!/0-NU!): " << o3.getEsteCapitala() << endl;
    cout << "Judetul din care provine orasul: " << o3.getJudet() << endl;
    cout << "Numarul de spitale din oras: " << o3.getNrSpitale() << endl;
    cout << "Spitalele din oras sunt: " << endl;
    for (int i = 0;i < o3.getNrSpitale();i++)
    {
        cout << o3.getVectSpitale()[i] << endl;
    }
    cout << endl << endl << endl;

    cout << "!!!!!!!!!!!!!!!!!!!!!!!! APELUL OPERATORULUI = !!!!!!!!!!!!!!!!!!!!!!" << endl;
    Oras o4;
    cout << "Obiectul o1 existent:" << endl;
    cout << "Denumirea orasului este: " << o1.getDenumireOras() << endl;
    cout << "Orasul este capitala? (1-DA!/0-NU!): " << o1.getEsteCapitala() << endl;
    cout << "Judetul din care provine orasul: " << o1.getJudet() << endl;
    cout << "Numarul de spitale din oras: " << o1.getNrSpitale() << endl;
    cout << "Spitalele din oras sunt: " << endl;
    for (int i = 0;i < o1.getNrSpitale();i++)
    {
        cout << o2.getVectSpitale()[i] << endl;
    }
    cout << endl << endl << endl;

    o4 = o1;
    cout << "Obiectul o4 dupa modificari:" << endl;
    cout << "Denumirea orasului este: " << o4.getDenumireOras() << endl;
    cout << "Orasul este capitala? (1-DA!/0-NU!): " << o4.getEsteCapitala() << endl;
    cout << "Judetul din care provine orasul: " << o4.getJudet() << endl;
    cout << "Numarul de spitale din oras: " << o4.getNrSpitale() << endl;
    cout << "Spitalele din oras sunt: " << endl;
    for (int i = 0;i < o1.getNrSpitale();i++)
    {
        cout << o4.getVectSpitale()[i] << endl;
    }
    cout << endl << endl << endl << endl << endl;

    //cout << "!!!!!!!!!!!!!!!!!!!!! SUPRAINCARCAREA OPERATORILOR: !!!!!!!!!!!!!!!!!!!!!!!!!!!" << endl;
    //cout << endl << endl;

    //cout << "!!!!!!!!!!!!!!!!!!!!!!!! SUPRAINCARCAREA OPERATORULUI << !!!!!!!!!!!!!!!!!!!!!!!!!" << endl;
    //cout << o3;
    //cout << endl << endl << endl;

    ////cout << "!!!!!!!!!!!!!!!!!!!!!!!! SUPRAINCARCAREA OPERATORULUI >> !!!!!!!!!!!!!!!!!!!!!!!!!" << endl;
    ////cin >> o1;
    ////cout << endl << endl << endl;

    //cout << "!!!!!!!!!!!!!!!!!!!!!!!! SUPRAINCARCAREA OPERATORULUI [] !!!!!!!!!!!!!!!!!!!!!!!!!!" << endl;
    //cout << o3 << endl << endl;
    //cout << "Spitalul de pe pozitia 2 din orasul o3 este: " << o3[2];
    //cout << endl << endl << endl;

    //cout << endl << endl << endl << endl << endl << endl;



    cout << "!!!!!!!!!!!!!!!!!!!!!!!!!!! RELATIA DE IS-A !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" << endl << endl;
    SpitalPrivat sp1;
    cout << "Numar sectii: " << sp1.getNrSpitale() << endl;
    cout << "Tipuri sectii: " << endl;
    for (int i = 0;i < sp1.getNrSpitale();i++)
    {
        cout << sp1.getTipuriSpitale()[i] << " ; ";
    }
    cout << "An constructie: " << sp1.getAnConstructie() << endl;
    cout << "Denumire spital: " << sp1.getDenumireSpital() << endl;
    cout << "Oras spital: " << sp1.getOrasSpital() << endl;
    cout << "Suprafata m^2: " << sp1.getSuprafataMp() << endl;
    cout << "Numar medici: " << sp1.getNrMedici() << endl;
    cout << "Numele medicilor: " << endl;
    for (int i = 0; i < sp1.getNrMedici(); i++)
    {
        cout << "Nume: " << sp1.getNumeMedici()[i] << " ; ";
    }
    cout << endl;
    cout << "Exista pacienti la ATI: ";
    if (sp1.getExistaPacientiLaAti() == 1)
    {
        cout << "DA!" << endl;
    }
    else
    {
        cout << "NU!" << endl;
    }
    cout << endl << endl;

    string tipuriSectii1[3] = { "Neurologie","Pediatrie","ORL" };
    string numeMediciSpitalPrivat1[4] = { "Sima", "Negoita", "Badea", "Ristea" };
    SpitalPrivat sp2(3, tipuriSectii1, 2006, "IoanLascar", "Brasov", 273.55, 3, numeMediciSpitalPrivat1, 1);
    cout << "Numar sectii: " << sp2.getNrSpitale() << endl;
    cout << "Tipuri sectii: " << endl;
    for (int i = 0;i < sp2.getNrSpitale();i++)
    {
        cout << sp2.getTipuriSpitale()[i] << " ; ";
    }
    cout << "An constructie: " << sp2.getAnConstructie() << endl;
    cout << "Denumire spital: " << sp2.getDenumireSpital() << endl;
    cout << "Oras spital: " << sp2.getOrasSpital() << endl;
    cout << "Suprafata m^2: " << sp2.getSuprafataMp() << endl;
    cout << "Numar medici: " << sp2.getNrMedici() << endl;
    cout << "Numele medicilor: " << endl;
    for (int i = 0; i < sp2.getNrMedici(); i++)
    {
        cout << "Nume: " << sp2.getNumeMedici()[i] << " ; ";
    }
    cout << endl;
    cout << "Exista pacienti la ATI: ";
    if (sp2.getExistaPacientiLaAti() == 1)
    {
        cout << "DA!" << endl;
    }
    else
    {
        cout << "NU!" << endl;
    }
    cout << endl << endl << endl;

    cout << "!!!!!!!!!!!!!!!!!!!!!!!!!!!!! APELUL SETTERILOR !!!!!!!!!!!!!!!!!!!!!!!!" << endl;
    cout << "Obiectul sp1 inainte de modificari: " << endl;
    cout << "Numar sectii: " << sp1.getNrSpitale() << endl;
    cout << "Tipuri sectii: " << endl;
    for (int i = 0;i < sp1.getNrSpitale();i++)
    {
        cout << sp1.getTipuriSpitale()[i] << " ; ";
    }
    cout << "An constructie: " << sp1.getAnConstructie() << endl;
    cout << "Denumire spital: " << sp1.getDenumireSpital() << endl;
    cout << "Oras spital: " << sp1.getOrasSpital() << endl;
    cout << "Suprafata m^2: " << sp1.getSuprafataMp() << endl;
    cout << "Numar medici: " << sp1.getNrMedici() << endl;
    cout << "Numele medicilor: " << endl;
    for (int i = 0; i < sp1.getNrMedici(); i++)
    {
        cout << "Nume: " << sp1.getNumeMedici()[i] << " ; ";
    }
    cout << endl;
    cout << "Exista pacienti la ATI: ";
    if (sp1.getExistaPacientiLaAti() == 1)
    {
        cout << "DA!" << endl;
    }
    else
    {
        cout << "NU!" << endl;
    }
    cout << endl << endl << endl;

    cout << "Obeictul sp1 dupa modificari: " << endl;

    //setteri
    string tipuriSectii2[3] = { "Cardiologie","Ortopedie" };
    string numeMediciSpitalPrivat2[3] = { "Buruiana","Miron" };
    sp1.setDenumireSpital("SfantulSpiridon");
    sp1.setSuprafataMp(353.77);
    sp1.setExistaPacientiLaAti(1);
    sp1.setOrasSpital("Brasov");
    sp1.setMedici(3, numeMediciSpitalPrivat2);


   

    cout << "Numar sectii: " << sp1.getNrSpitale() << endl;
    cout << "Tipuri sectii: " << endl;
    for (int i = 0;i < sp1.getNrSpitale();i++)
    {
        cout << sp1.getTipuriSpitale()[i] << " ; ";
    }
    cout << "An constructie: " << sp1.getAnConstructie() << endl;
    cout << "Denumire spital: " << sp1.getDenumireSpital() << endl;
    cout << "Oras spital: " << sp1.getOrasSpital() << endl;
    cout << "Suprafata m^2: " << sp1.getSuprafataMp() << endl;
    cout << "Numar medici: " << sp1.getNrMedici() << endl;
    cout << "Numele medicilor: " << endl;
    for (int i = 0; i < sp1.getNrMedici(); i++)
    {
        cout << "Nume: " << sp1.getNumeMedici()[i] << " ; ";
    }
    cout << endl;
    cout << "Exista pacienti la ATI: ";
    if (sp1.getExistaPacientiLaAti() == 1)
    {
        cout << "DA!" << endl;
    }
    else
    {
        cout << "NU!" << endl;
    }
    cout << endl << endl;

    cout << "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! CONSTRUCTORUL DE COPIERE !!!!!!!!!!!!!!!!!!!!!!!!" << endl;
    SpitalPrivat sp3 = sp2;

    cout << "!!!!!!!!! Obiectul existent sp2 !!!!!!!!!!" << endl;
    cout << "Numar sectii: " << sp2.getNrSpitale() << endl;
    cout << "Tipuri sectii: " << endl;
    for (int i = 0;i < sp2.getNrSpitale();i++)
    {
        cout << sp2.getTipuriSpitale()[i] << " ; ";
    }
    cout << "An constructie: " << sp2.getAnConstructie() << endl;
    cout << "Denumire spital: " << sp2.getDenumireSpital() << endl;
    cout << "Oras spital: " << sp2.getOrasSpital() << endl;
    cout << "Suprafata m^2: " << sp2.getSuprafataMp() << endl;
    cout << "Numar medici: " << sp2.getNrMedici() << endl;
    cout << "Numele medicilor: " << endl;
    for (int i = 0; i < sp2.getNrMedici(); i++)
    {
        cout << "Nume: " << sp2.getNumeMedici()[i] << " ; ";
    }
    cout << endl;
    cout << "Exista pacienti la ATI: ";
    if (sp2.getExistaPacientiLaAti() == 1)
    {
        cout << "DA!" << endl;
    }
    else
    {
        cout << "NU!" << endl;
    }
    cout << endl << endl << endl;

    cout << "!!!!!!!!!!! Obiectul nou sp3 !!!!!!!!" << endl;
    cout << "Numar sectii: " << sp3.getNrSpitale() << endl;
    cout << "Tipuri sectii: " << endl;
    for (int i = 0;i < sp3.getNrSpitale();i++)
    {
        cout << sp2.getTipuriSpitale()[i] << " ; ";
    }
    cout << "An constructie: " << sp3.getAnConstructie() << endl;
    cout << "Denumire spital: " << sp3.getDenumireSpital() << endl;
    cout << "Oras spital: " << sp3.getOrasSpital() << endl;
    cout << "Suprafata m^2: " << sp3.getSuprafataMp() << endl;
    cout << "Numar medici: " << sp3.getNrMedici() << endl;
    cout << "Numele medicilor: " << endl;
    for (int i = 0; i < sp3.getNrMedici(); i++)
    {
        cout << "Nume: " << sp3.getNumeMedici()[i] << " ; ";
    }
    cout << endl;
    cout << "Exista pacienti la ATI: ";
    if (sp3.getExistaPacientiLaAti() == 1)
    {
        cout << "DA!" << endl;
    }
    else
    {
        cout << "NU!" << endl;
    }
    cout << endl << endl << endl;

    cout << "!!!!!!!!!!!!!!!!!!! OPERATORUL = !!!!!!!!!!!!!!!" << endl;
    cout << "Obiectul sablon sp1: " << endl;
    cout << "Numar sectii: " << sp1.getNrSpitale() << endl;
    cout << "Tipuri sectii: " << endl;
    for (int i = 0;i < sp1.getNrSpitale();i++)
    {
        cout << sp1.getTipuriSpitale()[i] << " ; ";
    }
    cout << "An constructie: " << sp1.getAnConstructie() << endl;
    cout << "Denumire spital: " << sp1.getDenumireSpital() << endl;
    cout << "Oras spital: " << sp1.getOrasSpital() << endl;
    cout << "Suprafata m^2: " << sp1.getSuprafataMp() << endl;
    cout << "Numar medici: " << sp1.getNrMedici() << endl;
    cout << "Numele medicilor: " << endl;
    for (int i = 0; i < sp1.getNrMedici(); i++)
    {
        cout << "Nume: " << sp1.getNumeMedici()[i] << " ; ";
    }
    cout << endl;
    cout << "Exista pacienti la ATI: ";
    if (sp1.getExistaPacientiLaAti() == 1)
    {
        cout << "DA!" << endl;
    }
    else
    {
        cout << "NU!" << endl;
    }
    cout << endl << endl;

    cout << "Obiectul sp3 inainte de modificari: " << endl;
    cout << "Numar sectii: " << sp3.getNrSpitale() << endl;
    cout << "Tipuri sectii: " << endl;
    for (int i = 0;i < sp3.getNrSpitale();i++)
    {
        cout << sp2.getTipuriSpitale()[i] << " ; ";
    }
    cout << "An constructie: " << sp3.getAnConstructie() << endl;
    cout << "Denumire spital: " << sp3.getDenumireSpital() << endl;
    cout << "Oras spital: " << sp3.getOrasSpital() << endl;
    cout << "Suprafata m^2: " << sp3.getSuprafataMp() << endl;
    cout << "Numar medici: " << sp3.getNrMedici() << endl;
    cout << "Numele medicilor: " << endl;
    for (int i = 0; i < sp3.getNrMedici(); i++)
    {
        cout << "Nume: " << sp3.getNumeMedici()[i] << " ; ";
    }
    cout << endl;
    cout << "Exista pacienti la ATI: ";
    if (sp3.getExistaPacientiLaAti() == 1)
    {
        cout << "DA!" << endl;
    }
    else
    {
        cout << "NU!" << endl;
    }
    cout << endl << endl << endl;

    sp3 = sp1;

    cout << "Obiectul sp3 dupa modificari: " << endl;
    cout << "Numar sectii: " << sp3.getNrSpitale() << endl;
    cout << "Tipuri sectii: " << endl;
    for (int i = 0;i < sp3.getNrSpitale();i++)
    {
        cout << sp3.getTipuriSpitale()[i] << " ; ";
    }
    cout << "An constructie: " << sp3.getAnConstructie() << endl;
    cout << "Denumire spital: " << sp3.getDenumireSpital() << endl;
    cout << "Oras spital: " << sp3.getOrasSpital() << endl;
    cout << "Suprafata m^2: " << sp3.getSuprafataMp() << endl;
    cout << "Numar medici: " << sp3.getNrMedici() << endl;
    cout << "Numele medicilor: " << endl;
    for (int i = 0; i < sp3.getNrMedici(); i++)
    {
        cout << "Nume: " << sp3.getNumeMedici()[i] << " ; ";
    }
    cout << endl;
    cout << "Exista pacienti la ATI: ";
    if (sp3.getExistaPacientiLaAti() == 1)
    {
        cout << "DA!" << endl;
    }
    else
    {
        cout << "NU!" << endl;
    }
    cout << endl << endl << endl;

    cout << "!!!!!!!!!!!! Metoda !!!!!!!!!!!!!!!!" << endl;
    cout << "Numar sectii: " << sp2.getNrSpitale() << endl;
    cout << "Tipuri sectii: " << endl;
    for (int i = 0;i < sp2.getNrSpitale();i++)
    {
        cout << sp2.getTipuriSpitale()[i] << " ; ";
    }
    cout << "An constructie: " << sp2.getAnConstructie() << endl;
    cout << "Denumire spital: " << sp2.getDenumireSpital() << endl;
    cout << "Oras spital: " << sp2.getOrasSpital() << endl;
    cout << "Suprafata m^2: " << sp2.getSuprafataMp() << endl;
    cout << "Numar medici: " << sp2.getNrMedici() << endl;
    cout << "Numele medicilor: " << endl;
    for (int i = 0; i < sp2.getNrMedici(); i++)
    {
        cout << "Nume: " << sp2.getNumeMedici()[i] << " ; ";
    }
    cout << endl;
    cout << "Exista pacienti la ATI: ";
    if (sp2.getExistaPacientiLaAti() == 1)
    {
        cout << "DA!" << endl;
    }
    else
    {
        cout << "NU!" << endl;
    }
    cout << endl << endl;
    cout << "Tipurile de sectii din spitalul sp2 sunt: " << endl;
    sp2.afiseazaTipuriSectii();

    cout << "!!!!!!!!!!!!!!!!!!!!! OPERATORI !!!!!!!!!!!!!!!!!!!!" << endl << endl;
    cout << "!!!!!!!!!!!!!!!!!!!!!!!!!! SUPRAINCARCAREA OPERATORULUI << !!!!!!!!!!!!!!!!!!!!!" << endl;
    cout << sp2;
    cout << endl << endl << endl;

    /*cout << "!!!!!!!!!!!!!!!!!!!!!!!!!! SUPRAINCARCAREA OPERATORULUI >> !!!!!!!!!!!!!!!!!!!!!" << endl;
    cin >> s3;
    cout << endl << endl << endl;*/

    cout << "!!!!!!!!!!!!!!!!!!!!!!! UPCASTING !!!!!!!!!!!!!!!!!!!!!!!!!" << endl;
    cout << "Inainte de upcasting: " << endl;
    cout << "Obiectul s3: " << endl;
    cout << sp3 << endl << endl;

    cout << "SpitalPrivat 1:" << endl;
    cout << "Numar sectii: " << sp1.getNrSpitale() << endl;
    cout << "Tipuri sectii: " << endl;
    for (int i = 0;i < sp1.getNrSpitale();i++)
    {
        cout << sp1.getTipuriSpitale()[i] << " ; ";
    }
    cout << "An constructie: " << sp1.getAnConstructie() << endl;
    cout << "Denumire spital: " << sp1.getDenumireSpital() << endl;
    cout << "Oras spital: " << sp1.getOrasSpital() << endl;
    cout << "Suprafata m^2: " << sp1.getSuprafataMp() << endl;
    cout << "Numar medici: " << sp1.getNrMedici() << endl;
    cout << "Numele medicilor: " << endl;
    for (int i = 0; i < sp1.getNrMedici(); i++)
    {
        cout << "Nume: " << sp1.getNumeMedici()[i] << " ; ";
    }
    cout << endl;
    cout << "Exista pacienti la ATI: ";
    if (sp1.getExistaPacientiLaAti() == 1)
    {
        cout << "DA!" << endl;
    }
    else
    {
        cout << "NU!" << endl;
    }
    cout << endl << endl;

    s3 = sp3;

    cout << "Dupa upcasting: " << endl;
    cout << s3 << endl << endl;

    Spital sNou = sp1;
    cout << sNou << endl << endl;

}
